<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maeBlog</title>
  
  
  <link href="https://codermae.github.io/atom.xml" rel="self"/>
  
  <link href="https://codermae.github.io/"/>
  <updated>2021-06-26T07:40:44.338Z</updated>
  <id>https://codermae.github.io/</id>
  
  <author>
    <name>Ye Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>打卡0077</title>
    <link href="https://codermae.github.io/2021/06/25/%E6%89%93%E5%8D%A10077/"/>
    <id>https://codermae.github.io/2021/06/25/%E6%89%93%E5%8D%A10077/</id>
    <published>2021-06-25T02:21:45.000Z</published>
    <updated>2021-06-26T07:40:44.338Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#78cdd1&gt;hi,我的剑已出鞘，想和你过过招。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;7-数值的扩展&quot;&gt;&lt;a href=&quot;#7-数值的扩展&quot; class=&quot;headerlink&quot; title=&quot;7.数值的扩展&quot;&gt;&lt;/a&gt;7.数值的扩展&lt;/h3&gt;&lt;h4 id=&quot;7-1-二进制和八进制表示法&quot;&gt;&lt;a href=&quot;#7-1-二进制和八进制表示法&quot; class=&quot;headerlink&quot; title=&quot;7.1 二进制和八进制表示法&quot;&gt;&lt;/a&gt;7.1 二进制和八进制表示法&lt;/h4&gt;&lt;p&gt;ES6 提供了二进制和八进制数值的新的写法，分别用前缀&lt;code&gt;0b&lt;/code&gt;（或&lt;code&gt;0B&lt;/code&gt;）和&lt;code&gt;0o&lt;/code&gt;（或&lt;code&gt;0O&lt;/code&gt;）表示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0b111110111&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0o767&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀&lt;code&gt;0&lt;/code&gt;表示，ES6 进一步明确，要使用前缀&lt;code&gt;0o&lt;/code&gt;表示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 非严格模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;0o11&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;011&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)() &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 严格模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;  &amp;#x27;use strict&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;0o11&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;011&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)() &lt;span class=&quot;comment&quot;&gt;// Uncaught SyntaxError: Octal literals are not allowed in strict mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要将&lt;code&gt;0b&lt;/code&gt;和&lt;code&gt;0o&lt;/code&gt;前缀的字符串数值转为十进制，要使用&lt;code&gt;Number&lt;/code&gt;方法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;0b111&amp;#x27;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;0o10&amp;#x27;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 数值的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0076</title>
    <link href="https://codermae.github.io/2021/06/20/%E6%89%93%E5%8D%A10076/"/>
    <id>https://codermae.github.io/2021/06/20/%E6%89%93%E5%8D%A10076/</id>
    <published>2021-06-20T07:34:26.000Z</published>
    <updated>2021-06-25T02:19:29.379Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#f58220&gt;但因热爱，愿迎万难&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;6-正则的扩展&quot;&gt;&lt;a href=&quot;#6-正则的扩展&quot; class=&quot;headerlink&quot; title=&quot;6.正则的扩展&quot;&gt;&lt;/a&gt;6.正则的扩展&lt;/h3&gt;&lt;h4 id=&quot;6-1-RegExp-构造函数&quot;&gt;&lt;a href=&quot;#6-1-RegExp-构造函数&quot; class=&quot;headerlink&quot; title=&quot;6.1 RegExp 构造函数&quot;&gt;&lt;/a&gt;6.1 RegExp 构造函数&lt;/h4&gt;&lt;p&gt;在 ES5 中，&lt;code&gt;RegExp&lt;/code&gt;构造函数的参数有两种情况。&lt;/p&gt;
&lt;p&gt;第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;xyz&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;i&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;regexp&quot;&gt;/xyz/i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/xyz/i&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;regexp&quot;&gt;/xyz/i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/xyz/&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;i&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6 改变了这种行为。如果&lt;code&gt;RegExp&lt;/code&gt;构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/abc/ig&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;i&amp;#x27;&lt;/span&gt;).flags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;i&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，原有正则对象的修饰符是&lt;code&gt;ig&lt;/code&gt;，它会被第二个参数&lt;code&gt;i&lt;/code&gt;覆盖。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 正则的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0075</title>
    <link href="https://codermae.github.io/2021/06/18/%E6%89%93%E5%8D%A10075/"/>
    <id>https://codermae.github.io/2021/06/18/%E6%89%93%E5%8D%A10075/</id>
    <published>2021-06-18T08:06:21.000Z</published>
    <updated>2021-06-20T07:33:16.983Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ef5b9c&gt;世界上最重的木头会浮出水面吗？&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;5-字符串的新增方法&quot;&gt;&lt;a href=&quot;#5-字符串的新增方法&quot; class=&quot;headerlink&quot; title=&quot;5. 字符串的新增方法&quot;&gt;&lt;/a&gt;5. 字符串的新增方法&lt;/h3&gt;&lt;h4 id=&quot;5-1-String-fromCodePoint&quot;&gt;&lt;a href=&quot;#5-1-String-fromCodePoint&quot; class=&quot;headerlink&quot; title=&quot;5.1 String.fromCodePoint()&quot;&gt;&lt;/a&gt;5.1 String.fromCodePoint()&lt;/h4&gt;&lt;p&gt;ES5 提供&lt;code&gt;String.fromCharCode()&lt;/code&gt;方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于&lt;code&gt;0xFFFF&lt;/code&gt;的字符。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;number&quot;&gt;0x20BB7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;ஷ&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;String.fromCharCode()&lt;/code&gt;不能识别大于&lt;code&gt;0xFFFF&lt;/code&gt;的码点，所以&lt;code&gt;0x20BB7&lt;/code&gt;就发生了溢出，最高位&lt;code&gt;2&lt;/code&gt;被舍弃了，最后返回码点&lt;code&gt;U+0BB7&lt;/code&gt;对应的字符，而不是码点&lt;code&gt;U+20BB7&lt;/code&gt;对应的字符。&lt;/p&gt;
&lt;p&gt;ES6 提供了&lt;code&gt;String.fromCodePoint()&lt;/code&gt;方法，可以识别大于&lt;code&gt;0xFFFF&lt;/code&gt;的字符，弥补了&lt;code&gt;String.fromCharCode()&lt;/code&gt;方法的不足。在作用上，正好与下面的&lt;code&gt;codePointAt()&lt;/code&gt;方法相反。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCodePoint(&lt;span class=&quot;number&quot;&gt;0x20BB7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;𠮷&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCodePoint(&lt;span class=&quot;number&quot;&gt;0x78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x1f680&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x79&lt;/span&gt;) === &lt;span class=&quot;string&quot;&gt;&amp;#x27;x\uD83D\uDE80y&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，如果&lt;code&gt;String.fromCodePoint&lt;/code&gt;方法有多个参数，则它们会被合并成一个字符串返回。&lt;/p&gt;
&lt;p&gt;注意，&lt;code&gt;fromCodePoint&lt;/code&gt;方法定义在&lt;code&gt;String&lt;/code&gt;对象上，而&lt;code&gt;codePointAt&lt;/code&gt;方法定义在字符串的实例对象上。</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 字符串的新增方法" scheme="https://codermae.github.io/tags/JS-ES6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0074</title>
    <link href="https://codermae.github.io/2021/06/16/%E6%89%93%E5%8D%A10074/"/>
    <id>https://codermae.github.io/2021/06/16/%E6%89%93%E5%8D%A10074/</id>
    <published>2021-06-16T08:00:55.000Z</published>
    <updated>2021-06-18T08:05:17.002Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ae5039&gt;所见皆为美好，所行不负年少。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;4-字符串的扩展&quot;&gt;&lt;a href=&quot;#4-字符串的扩展&quot; class=&quot;headerlink&quot; title=&quot;4. 字符串的扩展&quot;&gt;&lt;/a&gt;4. 字符串的扩展&lt;/h3&gt;&lt;p&gt;本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。&lt;/p&gt;
&lt;h4 id=&quot;4-1-字符的-Unicode-表示法&quot;&gt;&lt;a href=&quot;#4-1-字符的-Unicode-表示法&quot; class=&quot;headerlink&quot; title=&quot;4.1 字符的 Unicode 表示法&quot;&gt;&lt;/a&gt;4.1 字符的 Unicode 表示法&lt;/h4&gt;&lt;p&gt;ES6 加强了对 Unicode 的支持，允许采用&lt;code&gt;\uxxxx&lt;/code&gt;形式表示一个字符，其中&lt;code&gt;xxxx&lt;/code&gt;表示字符的 Unicode 码点。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;\u0061&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，这种表示法只限于码点在&lt;code&gt;\u0000&lt;/code&gt;~`\uFFFF`之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;\uD842\uDFB7&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;𠮷&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;\u20BB7&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot; 7&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码表示，如果直接在&lt;code&gt;\u&lt;/code&gt;后面跟上超过&lt;code&gt;0xFFFF&lt;/code&gt;的数值（比如&lt;code&gt;\u20BB7&lt;/code&gt;），JavaScript 会理解成&lt;code&gt;\u20BB+7&lt;/code&gt;。由于&lt;code&gt;\u20BB&lt;/code&gt;是一个不可打印字符，所以只会显示一个空格，后面跟着一个&lt;code&gt;7&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 字符串的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0073</title>
    <link href="https://codermae.github.io/2021/06/15/%E6%89%93%E5%8D%A10073/"/>
    <id>https://codermae.github.io/2021/06/15/%E6%89%93%E5%8D%A10073/</id>
    <published>2021-06-15T07:48:25.000Z</published>
    <updated>2021-06-16T07:59:05.922Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#afb4db&gt;乐观和爱才是生活的解药。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;3-变量的解构赋值&quot;&gt;&lt;a href=&quot;#3-变量的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;3.变量的解构赋值&quot;&gt;&lt;/a&gt;3.变量的解构赋值&lt;/h3&gt;&lt;h4 id=&quot;3-1-数组的解构赋值&quot;&gt;&lt;a href=&quot;#3-1-数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;3.1 数组的解构赋值&quot;&gt;&lt;/a&gt;3.1 数组的解构赋值&lt;/h4&gt;&lt;h5 id=&quot;3-1-1-基本用法&quot;&gt;&lt;a href=&quot;#3-1-1-基本用法&quot; class=&quot;headerlink&quot; title=&quot;3.1.1 基本用法&quot;&gt;&lt;/a&gt;3.1.1 基本用法&lt;/h5&gt;&lt;p&gt;ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。&lt;/p&gt;
&lt;p&gt;以前，为变量赋值，只能直接指定值。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6 允许写成下面这样。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。&lt;/p&gt;
&lt;p&gt;本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 变量的解构赋值" scheme="https://codermae.github.io/tags/JS-ES6-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>打卡0072</title>
    <link href="https://codermae.github.io/2021/06/13/%E6%89%93%E5%8D%A10072/"/>
    <id>https://codermae.github.io/2021/06/13/%E6%89%93%E5%8D%A10072/</id>
    <published>2021-06-13T05:07:15.000Z</published>
    <updated>2021-06-15T07:47:16.307Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#50b7c1&gt;只要内心不乱，外界就很难改变你什么。记住，不要艳羡他人，不要输掉自己。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;2-let-和-const-命令&quot;&gt;&lt;a href=&quot;#2-let-和-const-命令&quot; class=&quot;headerlink&quot; title=&quot;2. let 和 const 命令&quot;&gt;&lt;/a&gt;2. let 和 const 命令&lt;/h3&gt;&lt;h4 id=&quot;2-1-let-命令&quot;&gt;&lt;a href=&quot;#2-1-let-命令&quot; class=&quot;headerlink&quot; title=&quot;2.1 let 命令&quot;&gt;&lt;/a&gt;2.1 let 命令&lt;/h4&gt;&lt;h5 id=&quot;2-1-1-基本用法&quot;&gt;&lt;a href=&quot;#2-1-1-基本用法&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 基本用法&quot;&gt;&lt;/a&gt;2.1.1 基本用法&lt;/h5&gt;&lt;p&gt;ES6 新增了&lt;code&gt;let&lt;/code&gt;命令，用来声明变量。它的用法类似于&lt;code&gt;var&lt;/code&gt;，但是所声明的变量，只在&lt;code&gt;let&lt;/code&gt;命令所在的代码块内有效。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &lt;span class=&quot;comment&quot;&gt;// ReferenceError: a is not defined.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码在代码块之中，分别用&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;var&lt;/code&gt;声明了两个变量。然后在代码块之外调用这两个变量，结果&lt;code&gt;let&lt;/code&gt;声明的变量报错，&lt;code&gt;var&lt;/code&gt;声明的变量返回了正确的值。这表明，&lt;code&gt;let&lt;/code&gt;声明的变量只在它所在的代码块有效。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt;循环的计数器，就很合适使用&lt;code&gt;let&lt;/code&gt;命令。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 let 和 const 命令" scheme="https://codermae.github.io/tags/JS-ES6-let-%E5%92%8C-const-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>打卡0071</title>
    <link href="https://codermae.github.io/2021/06/09/%E6%89%93%E5%8D%A10071/"/>
    <id>https://codermae.github.io/2021/06/09/%E6%89%93%E5%8D%A10071/</id>
    <published>2021-06-09T06:46:04.000Z</published>
    <updated>2021-06-15T07:47:20.617Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ffc20e&gt;生活如此美好，忧伤总会逃掉，既然阳光照耀，就报之以微笑。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;1-ECMAScript-6-简介&quot;&gt;&lt;a href=&quot;#1-ECMAScript-6-简介&quot; class=&quot;headerlink&quot; title=&quot;1. ECMAScript 6 简介&quot;&gt;&lt;/a&gt;1. ECMAScript 6 简介&lt;/h3&gt;&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;
&lt;h4 id=&quot;1-1-ECMAScript-和-JavaScript-的关系&quot;&gt;&lt;a href=&quot;#1-1-ECMAScript-和-JavaScript-的关系&quot; class=&quot;headerlink&quot; title=&quot;1.1 ECMAScript 和 JavaScript 的关系&quot;&gt;&lt;/a&gt;1.1 ECMAScript 和 JavaScript 的关系&lt;/h4&gt;&lt;p&gt;一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？&lt;/p&gt;
&lt;p&gt;要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。&lt;/p&gt;
&lt;p&gt;该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。&lt;/p&gt;
&lt;p&gt;因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 ECMAScript 6 简介" scheme="https://codermae.github.io/tags/JS-ES6-ECMAScript-6-%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>打卡0070</title>
    <link href="https://codermae.github.io/2021/06/05/%E6%89%93%E5%8D%A10070/"/>
    <id>https://codermae.github.io/2021/06/05/%E6%89%93%E5%8D%A10070/</id>
    <published>2021-06-05T06:23:56.000Z</published>
    <updated>2021-06-05T06:45:18.135Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#007d65&gt;愿你执迷不悟时有人陪你颠沛流离，愿你幡然醒悟时物是人是。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;15-Web-Worker&quot;&gt;&lt;a href=&quot;#15-Web-Worker&quot; class=&quot;headerlink&quot; title=&quot;15. Web Worker&quot;&gt;&lt;/a&gt;15. Web Worker&lt;/h3&gt;&lt;h4 id=&quot;15-1-概述&quot;&gt;&lt;a href=&quot;#15-1-概述&quot; class=&quot;headerlink&quot; title=&quot;15.1 概述&quot;&gt;&lt;/a&gt;15.1 概述&lt;/h4&gt;&lt;p&gt;JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。&lt;/p&gt;
&lt;p&gt;Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务可以交由 Worker 线程执行，主线程（通常负责 UI 交互）能够保持流畅，不会被阻塞或拖慢。&lt;/p&gt;
&lt;p&gt;Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。&lt;/p&gt;
&lt;p&gt;Web Worker 有以下几个使用注意点。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-Web Worker" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-Web-Worker/"/>
    
  </entry>
  
  <entry>
    <title>打卡0069</title>
    <link href="https://codermae.github.io/2021/06/05/%E6%89%93%E5%8D%A10069/"/>
    <id>https://codermae.github.io/2021/06/05/%E6%89%93%E5%8D%A10069/</id>
    <published>2021-06-05T04:42:43.000Z</published>
    <updated>2021-06-05T06:45:25.444Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#412f1f&gt;当你觉得孤独无助时，想一想还有十几亿细胞只为了你一个人而活。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;14-IndexedDB-API&quot;&gt;&lt;a href=&quot;#14-IndexedDB-API&quot; class=&quot;headerlink&quot; title=&quot;14. IndexedDB API&quot;&gt;&lt;/a&gt;14. IndexedDB API&lt;/h3&gt;&lt;h4 id=&quot;14-1-概述&quot;&gt;&lt;a href=&quot;#14-1-概述&quot; class=&quot;headerlink&quot; title=&quot;14.1 概述&quot;&gt;&lt;/a&gt;14.1 概述&lt;/h4&gt;&lt;p&gt;随着浏览器的功能不断增强，越来越多的网站开始考虑，将大量数据储存在客户端，这样可以减少从服务器获取数据，直接从本地获取数据。&lt;/p&gt;
&lt;p&gt;现有的浏览器数据储存方案，都不适合储存大量数据：Cookie 的大小不超过 4KB，且每次请求都会发送回服务器；LocalStorage 在 2.5MB 到 10MB 之间（各家浏览器不同），而且不提供搜索功能，不能建立自定义的索引。所以，需要一种新的解决方案，这就是 IndexedDB 诞生的背景。&lt;/p&gt;
&lt;p&gt;通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-IndexedDB API" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-IndexedDB-API/"/>
    
  </entry>
  
  <entry>
    <title>打卡0068</title>
    <link href="https://codermae.github.io/2021/06/04/%E6%89%93%E5%8D%A10068/"/>
    <id>https://codermae.github.io/2021/06/04/%E6%89%93%E5%8D%A10068/</id>
    <published>2021-06-04T01:08:16.000Z</published>
    <updated>2021-06-09T07:30:43.366Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#faa755&gt;要保持希望在每天清晨太阳升起。&lt;/font&gt;&lt;br&gt;菜鸟一个，一直没搞明白Vue和Node项目环境的搭建，处在雾里，昨晚终于卷完了，记录一下。&lt;br&gt;如果有人能看到，欢迎留言！&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://codermae.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Vue+Node+Express+postgresql" scheme="https://codermae.github.io/tags/Vue-Node-Express-postgresql/"/>
    
  </entry>
  
  <entry>
    <title>打卡0067</title>
    <link href="https://codermae.github.io/2021/06/03/%E6%89%93%E5%8D%A10067/"/>
    <id>https://codermae.github.io/2021/06/03/%E6%89%93%E5%8D%A10067/</id>
    <published>2021-06-03T01:50:16.000Z</published>
    <updated>2021-06-03T02:40:20.818Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#733a31&gt;不要轻易向别人诉苦，因为有很多人并不关心，还有很多人听到后会很高兴。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;13-表单，FormData-对象&quot;&gt;&lt;a href=&quot;#13-表单，FormData-对象&quot; class=&quot;headerlink&quot; title=&quot;13. 表单，FormData 对象&quot;&gt;&lt;/a&gt;13. 表单，FormData 对象&lt;/h3&gt;&lt;h4 id=&quot;13-1-表单概述&quot;&gt;&lt;a href=&quot;#13-1-表单概述&quot; class=&quot;headerlink&quot; title=&quot;13.1 表单概述&quot;&gt;&lt;/a&gt;13.1 表单概述&lt;/h4&gt;&lt;p&gt;表单（&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;）用来收集用户提交的数据，发送到服务器。比如，用户提交用户名和密码，让服务器验证，就要通过表单。表单提供多种控件，让开发者使用，具体的控件种类和用法请参考 HTML 语言的教程。本章主要介绍 JavaScript 与表单的交互。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;form action=&lt;span class=&quot;string&quot;&gt;&amp;quot;/handling-page&amp;quot;&lt;/span&gt; method=&lt;span class=&quot;string&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;label &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&amp;gt;用户名：&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&lt;span class=&quot;string&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&amp;quot;user_name&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;label &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;passwd&amp;quot;&lt;/span&gt;&amp;gt;密码：&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&lt;span class=&quot;string&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&amp;quot;passwd&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&amp;quot;user_passwd&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&lt;span class=&quot;string&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&amp;quot;submit_button&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&amp;quot;提交&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码就是一个简单的表单，包含三个控件：用户名输入框、密码输入框和提交按钮。&lt;/p&gt;
&lt;p&gt;用户点击“提交”按钮，每一个控件都会生成一个键值对，键名是控件的&lt;code&gt;name&lt;/code&gt;属性，键值是控件的&lt;code&gt;value&lt;/code&gt;属性，键名和键值之间由等号连接。比如，用户名输入框的&lt;code&gt;name&lt;/code&gt;属性是&lt;code&gt;user_name&lt;/code&gt;，&lt;code&gt;value&lt;/code&gt;属性是用户输入的值，假定是“张三”，提交到服务器的时候，就会生成一个键值对&lt;code&gt;user_name=张三&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-表单，FormData 对象" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-%E8%A1%A8%E5%8D%95%EF%BC%8CFormData-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0066</title>
    <link href="https://codermae.github.io/2021/06/03/%E6%89%93%E5%8D%A10066/"/>
    <id>https://codermae.github.io/2021/06/03/%E6%89%93%E5%8D%A10066/</id>
    <published>2021-06-03T01:27:38.000Z</published>
    <updated>2021-06-03T02:40:03.013Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#c1a173&gt;存储阳光，必有远芳；心中有暖，又何惧人生荒凉。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;12-File-对象，FileList-对象，FileReader-对象&quot;&gt;&lt;a href=&quot;#12-File-对象，FileList-对象，FileReader-对象&quot; class=&quot;headerlink&quot; title=&quot;12. File 对象，FileList 对象，FileReader 对象&quot;&gt;&lt;/a&gt;12. File 对象，FileList 对象，FileReader 对象&lt;/h3&gt;&lt;h4 id=&quot;12-1-File-对象&quot;&gt;&lt;a href=&quot;#12-1-File-对象&quot; class=&quot;headerlink&quot; title=&quot;12.1 File 对象&quot;&gt;&lt;/a&gt;12.1 File 对象&lt;/h4&gt;&lt;p&gt;File 对象代表一个文件，用来读写文件信息。它继承了 Blob 对象，或者说是一种特殊的 Blob 对象，所有可以使用 Blob 对象的场合都可以使用它。&lt;/p&gt;
&lt;p&gt;最常见的使用场合是表单的文件上传控件（&lt;code&gt;&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&lt;/code&gt;），用户选中文件以后，浏览器就会生成一个数组，里面是每一个用户选中的文件，它们都是 File 实例对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// HTML 代码如下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;lt;input id=&amp;quot;fileItem&amp;quot; type=&amp;quot;file&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&amp;#x27;fileItem&amp;#x27;&lt;/span&gt;).files[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; File &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;file&lt;/code&gt;是用户选中的第一个文件，它是 File 的实例。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-File 对象，FileList 对象，FileReader 对象" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-File-%E5%AF%B9%E8%B1%A1%EF%BC%8CFileList-%E5%AF%B9%E8%B1%A1%EF%BC%8CFileReader-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0065</title>
    <link href="https://codermae.github.io/2021/06/03/%E6%89%93%E5%8D%A10065/"/>
    <id>https://codermae.github.io/2021/06/03/%E6%89%93%E5%8D%A10065/</id>
    <published>2021-06-03T01:03:16.000Z</published>
    <updated>2021-06-03T02:39:30.158Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#afdfe4&gt;有人弃棋，有人做泥荷做清溪，有人成为风雨里的一行诗句。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;11-ArrayBuffer-对象，Blob-对象&quot;&gt;&lt;a href=&quot;#11-ArrayBuffer-对象，Blob-对象&quot; class=&quot;headerlink&quot; title=&quot;11. ArrayBuffer 对象，Blob 对象&quot;&gt;&lt;/a&gt;11. ArrayBuffer 对象，Blob 对象&lt;/h3&gt;&lt;h4 id=&quot;11-1-ArrayBuffer-对象&quot;&gt;&lt;a href=&quot;#11-1-ArrayBuffer-对象&quot; class=&quot;headerlink&quot; title=&quot;11.1 ArrayBuffer 对象&quot;&gt;&lt;/a&gt;11.1 ArrayBuffer 对象&lt;/h4&gt;&lt;p&gt;ArrayBuffer 对象表示一段二进制数据，用来模拟内存里面的数据。通过这个对象，JavaScript 可以读写二进制数据。这个对象可以看作内存数据的表达。&lt;/p&gt;
&lt;p&gt;这个对象是 ES6 才写入标准的，普通的网页编程用不到它，为了教程体系的完整，下面只提供一个简略的介绍，详细介绍请看《ES6 标准入门》里面的章节。&lt;/p&gt;
&lt;p&gt;浏览器原生提供&lt;code&gt;ArrayBuffer()&lt;/code&gt; 构造函数，用来生成实例。它接受一个整数作为参数，表示这段二进制数据占用多少个字节。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ArrayBuffer&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，实例对象&lt;code&gt;buffer&lt;/code&gt;占用8个字节。&lt;/p&gt;
&lt;p&gt;ArrayBuffer 对象有实例属性&lt;code&gt;byteLength&lt;/code&gt;，表示当前实例占用的内存长度（单位字节）。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ArrayBuffer&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buffer.byteLength &lt;span class=&quot;comment&quot;&gt;// 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ArrayBuffer 对象有实例方法&lt;code&gt;slice()&lt;/code&gt;，用来复制一部分内存。它接受两个整数参数，分别表示复制的开始位置（从0开始）和结束位置（复制时不包括结束位置），如果省略第二个参数，则表示一直复制到结束。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ArrayBuffer&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf2 = buf1.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码表示复制原来的实例。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-ArrayBuffer 对象，Blob 对象" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-ArrayBuffer-%E5%AF%B9%E8%B1%A1%EF%BC%8CBlob-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0064</title>
    <link href="https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10064/"/>
    <id>https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10064/</id>
    <published>2021-06-02T02:33:40.000Z</published>
    <updated>2021-06-02T03:31:14.971Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#84bf96&gt;It’s raining all the time, but we won’t stop.&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;10-Location对象，URL对象，URLSearchParams对象&quot;&gt;&lt;a href=&quot;#10-Location对象，URL对象，URLSearchParams对象&quot; class=&quot;headerlink&quot; title=&quot;10. Location对象，URL对象，URLSearchParams对象&quot;&gt;&lt;/a&gt;10. Location对象，URL对象，URLSearchParams对象&lt;/h3&gt;&lt;p&gt;URL 是互联网的基础设施之一。浏览器提供了一些原生对象，用来管理 URL。&lt;/p&gt;
&lt;h4 id=&quot;10-1-Location-对象&quot;&gt;&lt;a href=&quot;#10-1-Location-对象&quot; class=&quot;headerlink&quot; title=&quot;10.1 Location 对象&quot;&gt;&lt;/a&gt;10.1 Location 对象&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Location&lt;/code&gt;对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过&lt;code&gt;window.location&lt;/code&gt;和&lt;code&gt;document.location&lt;/code&gt;属性，可以拿到这个对象。&lt;/p&gt;
&lt;h5 id=&quot;10-1-1-属性&quot;&gt;&lt;a href=&quot;#10-1-1-属性&quot; class=&quot;headerlink&quot; title=&quot;10.1.1 属性&quot;&gt;&lt;/a&gt;10.1.1 属性&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Location&lt;/code&gt;对象提供以下属性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Location.href&lt;/code&gt;:整个 URL。&lt;br&gt;&lt;code&gt;Location.protocol&lt;/code&gt;:当前 URL 的协议，包括冒号（&lt;code&gt;:&lt;/code&gt;）。&lt;br&gt;&lt;code&gt;Location.host&lt;/code&gt;:主机。如果端口不是协议默认的&lt;code&gt;80&lt;/code&gt;和&lt;code&gt;433&lt;/code&gt;，则还会包括冒号（&lt;code&gt;:&lt;/code&gt;）和端口。&lt;br&gt;&lt;code&gt;Location.hostname&lt;/code&gt;:主机名，不包括端口。&lt;br&gt;&lt;code&gt;Location.port&lt;/code&gt;:端口号。&lt;br&gt;&lt;code&gt;Location.pathname&lt;/code&gt;:URL 的路径部分，从根路径/开始。&lt;br&gt;&lt;code&gt;Location.search&lt;/code&gt;:查询字符串部分，从问号&lt;code&gt;?&lt;/code&gt;开始。&lt;br&gt;&lt;code&gt;Location.hash&lt;/code&gt;:片段字符串部分，从&lt;code&gt;#&lt;/code&gt;开始。&lt;br&gt;&lt;code&gt;Location.username&lt;/code&gt;:域名前面的用户名。&lt;br&gt;&lt;code&gt;Location.password&lt;/code&gt;:域名前面的密码。&lt;br&gt;&lt;code&gt;Location.origin&lt;/code&gt;:URL 的协议、主机名和端口。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-Location对象，URL对象，URLSearchParams对象" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-Location%E5%AF%B9%E8%B1%A1%EF%BC%8CURL%E5%AF%B9%E8%B1%A1%EF%BC%8CURLSearchParams%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0063</title>
    <link href="https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10063/"/>
    <id>https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10063/</id>
    <published>2021-06-02T02:01:32.000Z</published>
    <updated>2021-06-02T02:32:50.472Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#2585a6&gt;独行的人总会遇到有趣的人&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;9-History-对象&quot;&gt;&lt;a href=&quot;#9-History-对象&quot; class=&quot;headerlink&quot; title=&quot;9.History 对象&quot;&gt;&lt;/a&gt;9.History 对象&lt;/h3&gt;&lt;h4 id=&quot;9-1-概述&quot;&gt;&lt;a href=&quot;#9-1-概述&quot; class=&quot;headerlink&quot; title=&quot;9.1 概述&quot;&gt;&lt;/a&gt;9.1 概述&lt;/h4&gt;&lt;p&gt;&lt;code&gt;window.history&lt;/code&gt;属性指向 History 对象，它表示当前窗口的浏览历史。&lt;/p&gt;
&lt;p&gt;History 对象保存了当前窗口访问过的所有页面网址。下面代码表示当前窗口一共访问过3个网址。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.history.length &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 后退到前一个网址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;history.back()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;history.go(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;浏览器工具栏的“前进”和“后退”按钮，其实就是对 History 对象进行操作。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-History 对象" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-History-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0062</title>
    <link href="https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10062/"/>
    <id>https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10062/</id>
    <published>2021-06-02T01:45:51.000Z</published>
    <updated>2021-06-02T02:32:41.678Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#525f42&gt;无论到了什么年龄，眼里都要有清澈的光芒，看过黑白之后，心中还有彩色留存。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;8-Storage-接口&quot;&gt;&lt;a href=&quot;#8-Storage-接口&quot; class=&quot;headerlink&quot; title=&quot;8.Storage 接口&quot;&gt;&lt;/a&gt;8.Storage 接口&lt;/h3&gt;&lt;h4 id=&quot;8-1-概述&quot;&gt;&lt;a href=&quot;#8-1-概述&quot; class=&quot;headerlink&quot; title=&quot;8.1 概述&quot;&gt;&lt;/a&gt;8.1 概述&lt;/h4&gt;&lt;p&gt;Storage 接口用于脚本在浏览器保存数据。两个对象部署了这个接口：&lt;code&gt;window.sessionStorage&lt;/code&gt;和&lt;code&gt;window.localStorage&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sessionStorage&lt;/code&gt;保存的数据用于浏览器的一次会话（session），当会话结束（通常是窗口关闭），数据被清空；&lt;code&gt;localStorage&lt;/code&gt;保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。除了保存期限的长短不同，这两个对象的其他方面都一致。&lt;/p&gt;
&lt;p&gt;保存的数据都以“键值对”的形式存在。也就是说，每一项数据都有一个键名和对应的值。所有的数据都是以文本格式保存。&lt;/p&gt;
&lt;p&gt;这个接口很像 Cookie 的强化版，能够使用大得多的存储空间。目前，每个域名的存储上限视浏览器而定，Chrome 是 2.5MB，Firefox 和 Opera 是 5MB，IE 是 10MB。其中，Firefox 的存储空间由一级域名决定，而其他浏览器没有这个限制。也就是说，Firefox 中，&lt;code&gt;a.example.com&lt;/code&gt;和&lt;code&gt;b.example.com&lt;/code&gt;共享 5MB 的存储空间。另外，与 Cookie 一样，它们也受同域限制。某个网页存入的数据，只有同域下的网页才能读取，如果跨域操作会报错。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-Storage 接口" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-Storage-%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>打卡0061</title>
    <link href="https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10061/"/>
    <id>https://codermae.github.io/2021/06/02/%E6%89%93%E5%8D%A10061/</id>
    <published>2021-06-02T01:04:28.000Z</published>
    <updated>2021-06-02T02:32:32.396Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#2f271d&gt;修炼匠心，在重复的岁月里，对得起每一寸光阴。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;7-CORS-通信&quot;&gt;&lt;a href=&quot;#7-CORS-通信&quot; class=&quot;headerlink&quot; title=&quot;7. CORS 通信&quot;&gt;&lt;/a&gt;7. CORS 通信&lt;/h3&gt;&lt;p&gt;CORS 是一个 W3C 标准，全称是“跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨域的服务器，发出&lt;code&gt;XMLHttpRequest&lt;/code&gt;请求，从而克服了 AJAX 只能同源使用的限制。&lt;/p&gt;
&lt;h4 id=&quot;7-1-简介&quot;&gt;&lt;a href=&quot;#7-1-简介&quot; class=&quot;headerlink&quot; title=&quot;7.1 简介&quot;&gt;&lt;/a&gt;7.1 简介&lt;/h4&gt;&lt;p&gt;CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能。&lt;/p&gt;
&lt;p&gt;整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与普通的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨域，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感知。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨域通信。&lt;/p&gt;
&lt;h4 id=&quot;7-2-两种请求&quot;&gt;&lt;a href=&quot;#7-2-两种请求&quot; class=&quot;headerlink&quot; title=&quot;7.2 两种请求&quot;&gt;&lt;/a&gt;7.2 两种请求&lt;/h4&gt;&lt;p&gt;CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。&lt;/p&gt;
&lt;p&gt;只要同时满足以下两大条件，就属于简单请求。&lt;/p&gt;
&lt;p&gt;（1）请求方法是以下三种方法之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HEAD&lt;/li&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）HTTP 的头信息不超出以下几种字段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;Accept-Language&lt;/li&gt;
&lt;li&gt;Content-Language&lt;/li&gt;
&lt;li&gt;Last-Event-ID&lt;/li&gt;
&lt;li&gt;Content-Type：只限于三个值&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;、&lt;code&gt;multipart/form-data&lt;/code&gt;、&lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-CORS 通信" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-CORS-%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0060</title>
    <link href="https://codermae.github.io/2021/06/01/%E6%89%93%E5%8D%A10060/"/>
    <id>https://codermae.github.io/2021/06/01/%E6%89%93%E5%8D%A10060/</id>
    <published>2021-06-01T02:19:57.000Z</published>
    <updated>2021-06-01T03:04:13.186Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#009ad6&gt;每个人的一生都是上帝手写的童话。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;6-同源限制&quot;&gt;&lt;a href=&quot;#6-同源限制&quot; class=&quot;headerlink&quot; title=&quot;6.同源限制&quot;&gt;&lt;/a&gt;6.同源限制&lt;/h3&gt;&lt;p&gt;浏览器安全的基石是“同源政策”（&lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt; ）。很多开发者都知道这一点，但了解得不全面。&lt;/p&gt;
&lt;h4 id=&quot;6-1-概述&quot;&gt;&lt;a href=&quot;#6-1-概述&quot; class=&quot;headerlink&quot; title=&quot;6.1 概述&quot;&gt;&lt;/a&gt;6.1 概述&lt;/h4&gt;&lt;h5 id=&quot;6-1-1-含义&quot;&gt;&lt;a href=&quot;#6-1-1-含义&quot; class=&quot;headerlink&quot; title=&quot;6.1.1 含义&quot;&gt;&lt;/a&gt;6.1.1 含义&lt;/h5&gt;&lt;p&gt;1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。&lt;/p&gt;
&lt;p&gt;最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页“同源”。所谓“同源”指的是“三个相同”。&lt;br&gt;`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同（这点可以忽略，详见下文）&lt;br&gt;`&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例来说，&lt;code&gt;http://www.example.com/dir/page.html&lt;/code&gt;这个网址，协议是&lt;code&gt;http://&lt;/code&gt;，域名是&lt;code&gt;www.example.com&lt;/code&gt;，端口是&lt;code&gt;80&lt;/code&gt;（默认端口可以省略），它的同源情况如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://www.example.com/dir2/other.html&lt;/code&gt;：同源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://example.com/dir/other.html&lt;/code&gt;：不同源（域名不同）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://v2.www.example.com/dir/other.html&lt;/code&gt;：不同源（域名不同）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://www.example.com:81/dir/other.html&lt;/code&gt;：不同源（端口不同）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.example.com/dir/page.html&lt;/code&gt;：不同源（协议不同）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，标准规定端口不同的网址不是同源（比如&lt;code&gt;8000&lt;/code&gt;端口和&lt;code&gt;8001&lt;/code&gt;端口不是同源），但是浏览器没有遵守这条规定。实际上，同一个网域的不同端口，是可以互相读取 Cookie 的。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-同源限制" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-%E5%90%8C%E6%BA%90%E9%99%90%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>打卡0059</title>
    <link href="https://codermae.github.io/2021/06/01/%E6%89%93%E5%8D%A10059/"/>
    <id>https://codermae.github.io/2021/06/01/%E6%89%93%E5%8D%A10059/</id>
    <published>2021-06-01T00:58:43.000Z</published>
    <updated>2021-06-01T03:04:05.786Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ffd400&gt;童心童趣，无关年龄，愿我们都能永葆一份童真。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;5-XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#5-XMLHttpRequest-对象&quot; class=&quot;headerlink&quot; title=&quot;5. XMLHttpRequest 对象&quot;&gt;&lt;/a&gt;5. XMLHttpRequest 对象&lt;/h3&gt;&lt;h4 id=&quot;5-1-简介&quot;&gt;&lt;a href=&quot;#5-1-简介&quot; class=&quot;headerlink&quot; title=&quot;5.1 简介&quot;&gt;&lt;/a&gt;5.1 简介&lt;/h4&gt;&lt;p&gt;浏览器与服务器之间，采用 HTTP 协议通信。用户在浏览器地址栏键入一个网址，或者通过网页表单向服务器提交内容，这时浏览器就会向服务器发出 HTTP 请求。&lt;/p&gt;
&lt;p&gt;1999年，微软公司发布 IE 浏览器5.0版，第一次引入新功能：允许 JavaScript 脚本向服务器发起 HTTP 请求。这个功能当时并没有引起注意，直到2004年 Gmail 发布和2005年 Google Map 发布，才引起广泛重视。2005年2月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。后来，AJAX 这个词就成为 JavaScript 脚本发起 HTTP 通信的代名词，也就是说，只要用脚本发起通信，就可以叫做 AJAX 通信。W3C 也在2006年发布了它的国际标准。&lt;/p&gt;
&lt;p&gt;具体来说，AJAX 包括以下几个步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 XMLHttpRequest 实例&lt;/li&gt;
&lt;li&gt;发出 HTTP 请求&lt;/li&gt;
&lt;li&gt;接收服务器传回的数据&lt;/li&gt;
&lt;li&gt;更新网页数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;概括起来，就是一句话，AJAX 通过原生的&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理。现在，服务器返回的都是 JSON 格式的数据，XML 格式已经过时了，但是 AJAX 这个名字已经成了一个通用名词，字面含义已经消失了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象是 AJAX 的主要接口，用于浏览器与服务器之间的通信。尽管名字里面有&lt;code&gt;XML&lt;/code&gt;和&lt;code&gt;Http&lt;/code&gt;，它实际上可以使用多种协议（比如&lt;code&gt;file&lt;/code&gt;或&lt;code&gt;ftp&lt;/code&gt;），发送任何格式的数据（包括字符串和二进制）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;本身是一个构造函数，可以使用&lt;code&gt;new&lt;/code&gt;命令生成实例。它没有任何参数。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-XMLHttpRequest 对象" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-XMLHttpRequest-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0058</title>
    <link href="https://codermae.github.io/2021/05/31/%E6%89%93%E5%8D%A10058/"/>
    <id>https://codermae.github.io/2021/05/31/%E6%89%93%E5%8D%A10058/</id>
    <published>2021-05-31T01:26:09.000Z</published>
    <updated>2021-05-31T02:12:17.822Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#6a6da9&gt;“我拥向宇宙吹来的风 与夏夜相逢 是八月盛景 是清寂长生”&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-浏览器模型&quot;&gt;&lt;a href=&quot;#JS-浏览器模型&quot; class=&quot;headerlink&quot; title=&quot;JS 浏览器模型&quot;&gt;&lt;/a&gt;JS 浏览器模型&lt;/h2&gt;&lt;h3 id=&quot;4-Cookie&quot;&gt;&lt;a href=&quot;#4-Cookie&quot; class=&quot;headerlink&quot; title=&quot;4. Cookie&quot;&gt;&lt;/a&gt;4. Cookie&lt;/h3&gt;&lt;h4 id=&quot;4-1-概述&quot;&gt;&lt;a href=&quot;#4-1-概述&quot; class=&quot;headerlink&quot; title=&quot;4.1 概述&quot;&gt;&lt;/a&gt;4.1 概述&lt;/h4&gt;&lt;p&gt;Cookie 是服务器保存在浏览器的一小段文本信息，一般大小不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。&lt;/p&gt;
&lt;p&gt;Cookie 主要保存状态信息，以下是一些主要用途。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对话（session）管理：保存登录、购物车等需要记录的信息。&lt;/li&gt;
&lt;li&gt;个性化信息：保存用户的偏好，比如网页的字体大小、背景色等等。&lt;/li&gt;
&lt;li&gt;追踪用户：记录和分析用户行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cookie 不是一种理想的客户端储存机制。它的容量很小（4KB），缺乏数据操作接口，而且会影响性能。客户端储存应该使用 Web storage API 和 IndexedDB。只有那些每次请求都需要让服务器知道的信息，才应该放在 Cookie 里面。&lt;/p&gt;
&lt;p&gt;每个 Cookie 都有以下几方面的元数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie 的名字&lt;/li&gt;
&lt;li&gt;Cookie 的值（真正的数据写在这里面）&lt;/li&gt;
&lt;li&gt;到期时间（超过这个时间会失效）&lt;/li&gt;
&lt;li&gt;所属域名（默认为当前域名）&lt;/li&gt;
&lt;li&gt;生效的路径（默认为当前网址）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS 浏览器模型-Cookie" scheme="https://codermae.github.io/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B-Cookie/"/>
    
  </entry>
  
</feed>
