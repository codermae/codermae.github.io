<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maeBlog</title>
  
  
  <link href="https://codermae.github.io/atom.xml" rel="self"/>
  
  <link href="https://codermae.github.io/"/>
  <updated>2021-05-25T02:36:50.104Z</updated>
  <id>https://codermae.github.io/</id>
  
  <author>
    <name>Ye Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>打卡0039</title>
    <link href="https://codermae.github.io/2021/05/25/%E6%89%93%E5%8D%A10039/"/>
    <id>https://codermae.github.io/2021/05/25/%E6%89%93%E5%8D%A10039/</id>
    <published>2021-05-25T01:05:50.000Z</published>
    <updated>2021-05-25T02:36:50.104Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#9b95c9&gt;星光不问赶路人，时光不负有心人。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-DOM&quot;&gt;&lt;a href=&quot;#JS-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS DOM&quot;&gt;&lt;/a&gt;JS DOM&lt;/h2&gt;&lt;h3 id=&quot;6-Element-节点&quot;&gt;&lt;a href=&quot;#6-Element-节点&quot; class=&quot;headerlink&quot; title=&quot;6. Element 节点&quot;&gt;&lt;/a&gt;6. Element 节点&lt;/h3&gt;&lt;h4 id=&quot;6-1-简介&quot;&gt;&lt;a href=&quot;#6-1-简介&quot; class=&quot;headerlink&quot; title=&quot;6.1 简介&quot;&gt;&lt;/a&gt;6.1 简介&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Element&lt;/code&gt;节点对象对应网页的 HTML 元素。每一个 HTML 元素，在 DOM 树上都会转化成一个&lt;code&gt;Element&lt;/code&gt;节点对象（以下简称元素节点）。&lt;/p&gt;
&lt;p&gt;元素节点的&lt;code&gt;nodeType&lt;/code&gt;属性都是&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&amp;#x27;p&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nodeName &lt;span class=&quot;comment&quot;&gt;// &amp;quot;P&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nodeType &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Element&lt;/code&gt;对象继承了&lt;code&gt;Node&lt;/code&gt;接口，因此&lt;code&gt;Node&lt;/code&gt;的属性和方法在&lt;code&gt;Element&lt;/code&gt;对象都存在。&lt;/p&gt;
&lt;p&gt;此外，不同的 HTML 元素对应的元素节点是不一样的，浏览器使用不同的构造函数，生成不同的元素节点，比如&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素的构造函数是&lt;code&gt;HTMLAnchorElement()&lt;/code&gt;，&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;是&lt;code&gt;HTMLButtonElement()&lt;/code&gt;。因此，元素节点不是一种对象，而是许多种对象，这些对象除了继承&lt;code&gt;Element&lt;/code&gt;对象的属性和方法，还有各自独有的属性和方法。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS DOM-Element 节点" scheme="https://codermae.github.io/tags/JS-DOM-Element-%E8%8A%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>打卡0038</title>
    <link href="https://codermae.github.io/2021/05/24/%E6%89%93%E5%8D%A10038/"/>
    <id>https://codermae.github.io/2021/05/24/%E6%89%93%E5%8D%A10038/</id>
    <published>2021-05-24T01:03:42.000Z</published>
    <updated>2021-05-24T08:15:11.096Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#987165&gt;人海茫茫，能够相遇本来就是难得的缘分，愿我们都能够以体谅之心爱人，不敷衍每一份真情，互相体谅，好好珍惜。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-DOM&quot;&gt;&lt;a href=&quot;#JS-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS DOM&quot;&gt;&lt;/a&gt;JS DOM&lt;/h2&gt;&lt;h3 id=&quot;5-Document-节点&quot;&gt;&lt;a href=&quot;#5-Document-节点&quot; class=&quot;headerlink&quot; title=&quot;5. Document 节点&quot;&gt;&lt;/a&gt;5. Document 节点&lt;/h3&gt;&lt;h4 id=&quot;5-1-概述&quot;&gt;&lt;a href=&quot;#5-1-概述&quot; class=&quot;headerlink&quot; title=&quot;5.1 概述&quot;&gt;&lt;/a&gt;5.1 概述&lt;/h4&gt;&lt;p&gt;&lt;code&gt;document&lt;/code&gt;节点对象代表整个文档，每张网页都有自己的&lt;code&gt;document&lt;/code&gt;对象。&lt;code&gt;window.document&lt;/code&gt;属性就指向这个对象。只要浏览器开始载入 HTML 文档，该对象就存在了，可以直接使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;document&lt;/code&gt;对象有不同的办法可以获取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正常的网页，直接使用&lt;code&gt;document&lt;/code&gt;或&lt;code&gt;window.document&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iframe&lt;/code&gt;框架里面的网页，使用&lt;code&gt;iframe&lt;/code&gt;节点的&lt;code&gt;contentDocument&lt;/code&gt;属性 。&lt;/li&gt;
&lt;li&gt;Ajax 操作返回的文档，使用&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象的&lt;code&gt;responseXML&lt;/code&gt;属性。&lt;/li&gt;
&lt;li&gt;内部节点的&lt;code&gt;ownerDocument&lt;/code&gt;属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;document&lt;/code&gt;对象继承了&lt;code&gt;EventTarget&lt;/code&gt;接口和&lt;code&gt;Node&lt;/code&gt;接口，并且混入（mixin）了&lt;code&gt;ParentNode&lt;/code&gt;接口。这意味着，这些接口的方法都可以在&lt;code&gt;document&lt;/code&gt;对象上调用。除此之外，&lt;code&gt;document&lt;/code&gt;对象还有很多自己的属性和方法。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS DOM-Document 节点" scheme="https://codermae.github.io/tags/JS-DOM-Document-%E8%8A%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>打卡0037</title>
    <link href="https://codermae.github.io/2021/05/23/%E6%89%93%E5%8D%A10037/"/>
    <id>https://codermae.github.io/2021/05/23/%E6%89%93%E5%8D%A10037/</id>
    <published>2021-05-23T05:09:14.000Z</published>
    <updated>2021-05-23T05:28:20.221Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=gray&gt;他进入了一个梦乡，那里的稻穗比高粱还高，穗粒比花生还大。风轻轻吹过，他就坐在稻穗下乘凉。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-DOM&quot;&gt;&lt;a href=&quot;#JS-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS DOM&quot;&gt;&lt;/a&gt;JS DOM&lt;/h2&gt;&lt;h3 id=&quot;4-ParentNode-接口，ChildNode-接口&quot;&gt;&lt;a href=&quot;#4-ParentNode-接口，ChildNode-接口&quot; class=&quot;headerlink&quot; title=&quot;4. ParentNode 接口，ChildNode 接口&quot;&gt;&lt;/a&gt;4. ParentNode 接口，ChildNode 接口&lt;/h3&gt;&lt;p&gt;节点对象除了继承 Node 接口以外，还拥有其他接口。&lt;code&gt;ParentNode&lt;/code&gt;接口表示当前节点是一个父节点，提供一些处理子节点的方法。&lt;code&gt;ChildNode&lt;/code&gt;接口表示当前节点是一个子节点，提供一些相关方法。&lt;/p&gt;
&lt;h4 id=&quot;4-1-ParentNode-接口&quot;&gt;&lt;a href=&quot;#4-1-ParentNode-接口&quot; class=&quot;headerlink&quot; title=&quot;4.1 ParentNode 接口&quot;&gt;&lt;/a&gt;4.1 ParentNode 接口&lt;/h4&gt;&lt;p&gt;如果当前节点是父节点，就会混入了（mixin）&lt;code&gt;ParentNode&lt;/code&gt;接口。由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，因此只有这三类节点会拥有&lt;code&gt;ParentNode&lt;/code&gt;接口。&lt;/p&gt;
&lt;h5 id=&quot;4-1-1-ParentNode-children&quot;&gt;&lt;a href=&quot;#4-1-1-ParentNode-children&quot; class=&quot;headerlink&quot; title=&quot;4.1.1 ParentNode.children&quot;&gt;&lt;/a&gt;4.1.1 ParentNode.children&lt;/h5&gt;&lt;p&gt;&lt;code&gt;children&lt;/code&gt;属性返回一个&lt;code&gt;HTMLCollection&lt;/code&gt;实例，成员是当前节点的所有元素子节点。该属性只读。&lt;/p&gt;
&lt;p&gt;下面是遍历某个节点的所有元素子节点的示例。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; el.children.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS DOM-ParentNode 接口，ChildNode 接口" scheme="https://codermae.github.io/tags/JS-DOM-ParentNode-%E6%8E%A5%E5%8F%A3%EF%BC%8CChildNode-%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>打卡0036</title>
    <link href="https://codermae.github.io/2021/05/23/%E6%89%93%E5%8D%A10036/"/>
    <id>https://codermae.github.io/2021/05/23/%E6%89%93%E5%8D%A10036/</id>
    <published>2021-05-23T04:48:16.000Z</published>
    <updated>2021-05-23T05:23:42.416Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=gray&gt;老骥伏枥，志在千里。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-DOM&quot;&gt;&lt;a href=&quot;#JS-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS DOM&quot;&gt;&lt;/a&gt;JS DOM&lt;/h2&gt;&lt;h3 id=&quot;3-NodeList-接口，HTMLCollection-接口&quot;&gt;&lt;a href=&quot;#3-NodeList-接口，HTMLCollection-接口&quot; class=&quot;headerlink&quot; title=&quot;3. NodeList 接口，HTMLCollection 接口&quot;&gt;&lt;/a&gt;3. NodeList 接口，HTMLCollection 接口&lt;/h3&gt;&lt;p&gt;节点都是单个对象，有时需要一种数据结构，能够容纳多个节点。DOM 提供两种节点集合，用于容纳多个节点：&lt;code&gt;NodeList&lt;/code&gt;和&lt;code&gt;HTMLCollection&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这两种集合都属于接口规范。许多 DOM 属性和方法，返回的结果是&lt;code&gt;NodeList&lt;/code&gt;实例或&lt;code&gt;HTMLCollection&lt;/code&gt;实例。主要区别是，&lt;code&gt;NodeList&lt;/code&gt;可以包含各种类型的节点，&lt;code&gt;HTMLCollection&lt;/code&gt;只能包含 HTML 元素节点。&lt;/p&gt;
&lt;h4 id=&quot;3-1-NodeList-接口&quot;&gt;&lt;a href=&quot;#3-1-NodeList-接口&quot; class=&quot;headerlink&quot; title=&quot;3.1 NodeList 接口&quot;&gt;&lt;/a&gt;3.1 NodeList 接口&lt;/h4&gt;&lt;h5 id=&quot;3-1-1-概述&quot;&gt;&lt;a href=&quot;#3-1-1-概述&quot; class=&quot;headerlink&quot; title=&quot;3.1.1 概述&quot;&gt;&lt;/a&gt;3.1.1 概述&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NodeList&lt;/code&gt;实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到&lt;code&gt;NodeList&lt;/code&gt;实例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Node.childNodes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.querySelectorAll()&lt;/code&gt;等节点搜索方法&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS DOM-NodeList 接口，HTMLCollection 接口" scheme="https://codermae.github.io/tags/JS-DOM-NodeList-%E6%8E%A5%E5%8F%A3%EF%BC%8CHTMLCollection-%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>打卡0035</title>
    <link href="https://codermae.github.io/2021/05/22/%E6%89%93%E5%8D%A10035/"/>
    <id>https://codermae.github.io/2021/05/22/%E6%89%93%E5%8D%A10035/</id>
    <published>2021-05-22T01:56:52.000Z</published>
    <updated>2021-05-22T03:22:26.180Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#375830&gt;恰沐春风共同游，终只叹，木已舟。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-DOM&quot;&gt;&lt;a href=&quot;#JS-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS DOM&quot;&gt;&lt;/a&gt;JS DOM&lt;/h2&gt;&lt;h3 id=&quot;2-Node接口&quot;&gt;&lt;a href=&quot;#2-Node接口&quot; class=&quot;headerlink&quot; title=&quot;2. Node接口&quot;&gt;&lt;/a&gt;2. Node接口&lt;/h3&gt;&lt;p&gt;所有 DOM 节点对象都继承了 Node 接口，拥有一些共同的属性和方法。这是 DOM 操作的基础。&lt;/p&gt;
&lt;h4 id=&quot;2-1-属性&quot;&gt;&lt;a href=&quot;#2-1-属性&quot; class=&quot;headerlink&quot; title=&quot;2.1 属性&quot;&gt;&lt;/a&gt;2.1 属性&lt;/h4&gt;&lt;h5 id=&quot;2-1-1-Node-prototype-nodeType&quot;&gt;&lt;a href=&quot;#2-1-1-Node-prototype-nodeType&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 Node.prototype.nodeType&quot;&gt;&lt;/a&gt;2.1.1 Node.prototype.nodeType&lt;/h5&gt;&lt;p&gt;&lt;code&gt;nodeType&lt;/code&gt;属性返回一个整数值，表示节点的类型。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.nodeType &lt;span class=&quot;comment&quot;&gt;// 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，文档节点的类型值为9。&lt;/p&gt;
&lt;p&gt;Node 对象定义了几个常量，对应这些类型值。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.nodeType === Node.DOCUMENT_NODE &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，文档节点的&lt;code&gt;nodeType&lt;/code&gt;属性等于常量&lt;code&gt;Node.DOCUMENT_NODE&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不同节点的&lt;code&gt;nodeType&lt;/code&gt;属性值和对应的常量如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档节点（document）：9，对应常量&lt;code&gt;Node.DOCUMENT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;元素节点（element）：1，对应常量&lt;code&gt;Node.ELEMENT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;属性节点（attr）：2，对应常量&lt;code&gt;Node.ATTRIBUTE_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文本节点（text）：3，对应常量&lt;code&gt;Node.TEXT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文档片断节点（DocumentFragment）：11，对应常量&lt;code&gt;Node.DOCUMENT_FRAGMENT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文档类型节点（DocumentType）：10，对应常量&lt;code&gt;Node.DOCUMENT_TYPE_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注释节点（Comment）：8，对应常量&lt;code&gt;Node.COMMENT_NODE&lt;/code&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS DOM-Node接口" scheme="https://codermae.github.io/tags/JS-DOM-Node%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>打卡0034</title>
    <link href="https://codermae.github.io/2021/05/22/%E6%89%93%E5%8D%A10034/"/>
    <id>https://codermae.github.io/2021/05/22/%E6%89%93%E5%8D%A10034/</id>
    <published>2021-05-22T01:21:24.000Z</published>
    <updated>2021-05-22T03:22:05.059Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ae6642&gt;无情最是台城柳，依旧烟笼十里堤。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS-DOM&quot;&gt;&lt;a href=&quot;#JS-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS DOM&quot;&gt;&lt;/a&gt;JS DOM&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;h4 id=&quot;1-1-DOM&quot;&gt;&lt;a href=&quot;#1-1-DOM&quot; class=&quot;headerlink&quot; title=&quot;1.1 DOM&quot;&gt;&lt;/a&gt;1.1 DOM&lt;/h4&gt;&lt;p&gt;DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。&lt;/p&gt;
&lt;p&gt;浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。&lt;/p&gt;
&lt;p&gt;DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。后面介绍的就是 JavaScript 对 DOM 标准的实现和用法。&lt;/p&gt;
&lt;h4 id=&quot;1-2节点&quot;&gt;&lt;a href=&quot;#1-2节点&quot; class=&quot;headerlink&quot; title=&quot;1.2节点&quot;&gt;&lt;/a&gt;1.2节点&lt;/h4&gt;&lt;p&gt;DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。&lt;/p&gt;
&lt;p&gt;节点的类型有七种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Document&lt;/code&gt;：整个文档树的顶层节点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DocumentType&lt;/code&gt;：&lt;code&gt;doctype&lt;/code&gt;标签（比如&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Element&lt;/code&gt;：网页的各种HTML标签（比如&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;等）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Attr&lt;/code&gt;：网页元素的属性（比如&lt;code&gt;class=&amp;quot;right&amp;quot;&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Text&lt;/code&gt;：标签之间或标签包含的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Comment&lt;/code&gt;：注释&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;：文档的片段</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS DOM-概述" scheme="https://codermae.github.io/tags/JS-DOM-%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>打卡0033</title>
    <link href="https://codermae.github.io/2021/05/22/%E6%89%93%E5%8D%A10033/"/>
    <id>https://codermae.github.io/2021/05/22/%E6%89%93%E5%8D%A10033/</id>
    <published>2021-05-22T00:36:17.000Z</published>
    <updated>2021-05-22T03:21:03.617Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ef5b9c&gt;你相信时间会抚平一切，可时过境迁，你已不复醒&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS异步操作&quot;&gt;&lt;a href=&quot;#JS异步操作&quot; class=&quot;headerlink&quot; title=&quot;JS异步操作&quot;&gt;&lt;/a&gt;JS异步操作&lt;/h2&gt;&lt;h3 id=&quot;3-Promise对象&quot;&gt;&lt;a href=&quot;#3-Promise对象&quot; class=&quot;headerlink&quot; title=&quot;3. Promise对象&quot;&gt;&lt;/a&gt;3. Promise对象&lt;/h3&gt;&lt;h4 id=&quot;3-1-概述&quot;&gt;&lt;a href=&quot;#3-1-概述&quot; class=&quot;headerlink&quot; title=&quot;3.1 概述&quot;&gt;&lt;/a&gt;3.1 概述&lt;/h4&gt;&lt;p&gt;Promise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。&lt;/p&gt;
&lt;p&gt;注意，本章只是 Promise 对象的简单介绍。为了避免与后续教程的重复，更完整的介绍请看《ES6 标准入门》的《Promise 对象》一章。&lt;/p&gt;
&lt;p&gt;首先，Promise 是一个对象，也是一个构造函数。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 异步代码...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(f1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;Promise&lt;/code&gt;构造函数接受一个回调函数&lt;code&gt;f1&lt;/code&gt;作为参数，&lt;code&gt;f1&lt;/code&gt;里面是异步操作的代码。然后，返回的&lt;code&gt;p1&lt;/code&gt;就是一个 Promise 实例。&lt;/p&gt;
&lt;p&gt;Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个&lt;code&gt;then&lt;/code&gt;方法，用来指定下一步的回调函数。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS异步操作-Promise对象" scheme="https://codermae.github.io/tags/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C-Promise%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0032</title>
    <link href="https://codermae.github.io/2021/05/21/%E6%89%93%E5%8D%A10032/"/>
    <id>https://codermae.github.io/2021/05/21/%E6%89%93%E5%8D%A10032/</id>
    <published>2021-05-21T00:16:46.000Z</published>
    <updated>2021-05-22T02:03:51.525Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#2eb806&gt;夜莺啼绿柳 皓月醒长空 最爱垄头麦 迎风笑落红&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS异步操作&quot;&gt;&lt;a href=&quot;#JS异步操作&quot; class=&quot;headerlink&quot; title=&quot;JS异步操作&quot;&gt;&lt;/a&gt;JS异步操作&lt;/h2&gt;&lt;h3 id=&quot;2-定时器&quot;&gt;&lt;a href=&quot;#2-定时器&quot; class=&quot;headerlink&quot; title=&quot;2. 定时器&quot;&gt;&lt;/a&gt;2. 定时器&lt;/h3&gt;&lt;p&gt;JavaScript 提供定时执行代码的功能，叫做定时器（timer），主要由&lt;code&gt;setTimeout()&lt;/code&gt;和&lt;code&gt;setInterval()&lt;/code&gt;这两个函数来完成。它们向任务队列添加定时任务。&lt;/p&gt;
&lt;h4 id=&quot;2-1-setTimeout&quot;&gt;&lt;a href=&quot;#2-1-setTimeout&quot; class=&quot;headerlink&quot; title=&quot;2.1  setTimeout()&quot;&gt;&lt;/a&gt;2.1  setTimeout()&lt;/h4&gt;&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt;函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timerId = &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(func|code, delay);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;setTimeout&lt;/code&gt;函数接受两个参数，第一个参数&lt;code&gt;func|code&lt;/code&gt;是将要推迟执行的函数名或者一段代码，第二个参数&lt;code&gt;delay&lt;/code&gt;是推迟执行的毫秒数。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;console.log(2)&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS异步操作-定时器" scheme="https://codermae.github.io/tags/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C-%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>打卡0031</title>
    <link href="https://codermae.github.io/2021/05/20/%E6%89%93%E5%8D%A10031/"/>
    <id>https://codermae.github.io/2021/05/20/%E6%89%93%E5%8D%A10031/</id>
    <published>2021-05-20T06:51:46.000Z</published>
    <updated>2021-05-22T02:03:40.338Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#8c531b&gt;步伐虽小，密而不停&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS异步操作&quot;&gt;&lt;a href=&quot;#JS异步操作&quot; class=&quot;headerlink&quot; title=&quot;JS异步操作&quot;&gt;&lt;/a&gt;JS异步操作&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;h4 id=&quot;1-1单线程模型&quot;&gt;&lt;a href=&quot;#1-1单线程模型&quot; class=&quot;headerlink&quot; title=&quot;1.1单线程模型&quot;&gt;&lt;/a&gt;1.1单线程模型&lt;/h4&gt;&lt;p&gt;单线程模型指的是，JavaScript 只在一个线程上运行。也就是说，JavaScript 同时只能执行一个任务，其他任务都必须在后面排队等待。&lt;/p&gt;
&lt;p&gt;注意，JavaScript 只在一个线程上运行，不代表 JavaScript 引擎只有一个线程。事实上，JavaScript 引擎有多个线程，单个脚本只能在一个线程上运行（称为主线程），其他线程都是在后台配合。&lt;/p&gt;
&lt;p&gt;JavaScript 之所以采用单线程，而不是多线程，跟历史有关系。JavaScript 从诞生起就是单线程，原因是不想让浏览器变得太复杂，因为多线程需要共享资源、且有可能修改彼此的运行结果，对于一种网页脚本语言来说，这就太复杂了。如果 JavaScript 同时有两个线程，一个线程在网页 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？是不是还要有锁机制？所以，为了避免复杂性，JavaScript 一开始就是单线程，这已经成了这门语言的核心特征，将来也不会改变。&lt;/p&gt;
&lt;p&gt;这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段 JavaScript 代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。JavaScript 语言本身并不慢，慢的是读写外部数据，比如等待 Ajax 请求返回结果。这个时候，如果对方服务器迟迟没有响应，或者网络不通畅，就会导致脚本的长时间停滞。&lt;/p&gt;
&lt;p&gt;如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 IO 操作（输入输出）很慢（比如 Ajax 操作从网络读取数据），不得不等着结果出来，再往下执行。JavaScript 语言的设计者意识到，这时 CPU 完全可以不管 IO 操作，挂起处于等待中的任务，先运行排在后面的任务。等到 IO 操作返回了结果，再回过头，把挂起的任务继续执行下去。这种机制就是 JavaScript 内部采用的“事件循环”机制（Event Loop）。&lt;/p&gt;
&lt;p&gt;单线程模型虽然对 JavaScript 构成了很大的限制，但也因此使它具备了其他语言不具备的优势。如果用得好，JavaScript 程序是不会出现堵塞的，这就是为什么 Node 可以用很少的资源，应付大流量访问的原因。&lt;/p&gt;
&lt;p&gt;为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS异步操作-概述" scheme="https://codermae.github.io/tags/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C-%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>打卡0030</title>
    <link href="https://codermae.github.io/2021/05/20/%E6%89%93%E5%8D%A10030/"/>
    <id>https://codermae.github.io/2021/05/20/%E6%89%93%E5%8D%A10030/</id>
    <published>2021-05-20T01:37:29.000Z</published>
    <updated>2021-05-22T02:03:23.866Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=gray&gt;真正的好朋友，不一定是和你聊天最多的人，却一定会在你需要的时候挺身而出，在你难熬的时候给你鼓励和力量。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS面向对象编程&quot;&gt;&lt;a href=&quot;#JS面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;JS面向对象编程&quot;&gt;&lt;/a&gt;JS面向对象编程&lt;/h2&gt;&lt;h3 id=&quot;5-严格模式&quot;&gt;&lt;a href=&quot;#5-严格模式&quot; class=&quot;headerlink&quot; title=&quot;5. 严格模式&quot;&gt;&lt;/a&gt;5. 严格模式&lt;/h3&gt;&lt;p&gt;除了正常的运行模式，JavaScript 还有第二种运行模式：严格模式（strict mode）。顾名思义，这种模式采用更加严格的 JavaScript 语法。&lt;/p&gt;
&lt;p&gt;同样的代码，在正常模式和严格模式中，可能会有不一样的运行结果。一些在正常模式下可以运行的语句，在严格模式下将不能运行。&lt;/p&gt;
&lt;h4 id=&quot;5-1-设计目的&quot;&gt;&lt;a href=&quot;#5-1-设计目的&quot; class=&quot;headerlink&quot; title=&quot;5.1 设计目的&quot;&gt;&lt;/a&gt;5.1 设计目的&lt;/h4&gt;&lt;p&gt;早期的 JavaScript 语言有很多设计不合理的地方，但是为了兼容以前的代码，又不能改变老的语法，只能不断添加新的语法，引导程序员使用新语法。&lt;/p&gt;
&lt;p&gt;严格模式是从 ES5 进入标准的，主要目的有以下几个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确禁止一些不合理、不严谨的语法，减少 JavaScript 语言的一些怪异行为。&lt;/li&gt;
&lt;li&gt;增加更多报错的场合，消除代码运行的一些不安全之处，保证代码运行的安全。&lt;/li&gt;
&lt;li&gt;提高编译器效率，增加运行速度。&lt;/li&gt;
&lt;li&gt;为未来新版本的 JavaScript 语法做好铺垫。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，严格模式体现了 JavaScript 更合理、更安全、更严谨的发展方向。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS面向对象编程-严格模式" scheme="https://codermae.github.io/tags/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>打卡0029</title>
    <link href="https://codermae.github.io/2021/05/20/%E6%89%93%E5%8D%A10029/"/>
    <id>https://codermae.github.io/2021/05/20/%E6%89%93%E5%8D%A10029/</id>
    <published>2021-05-20T00:50:47.000Z</published>
    <updated>2021-05-22T02:03:16.594Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#0080FF&gt;我是只化身孤岛的蓝鲸 有着最巨大的身影 鱼虾在身侧穿行 也有飞鸟在背上停&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS面向对象编程&quot;&gt;&lt;a href=&quot;#JS面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;JS面向对象编程&quot;&gt;&lt;/a&gt;JS面向对象编程&lt;/h2&gt;&lt;h3 id=&quot;4-Object对象的相关方法&quot;&gt;&lt;a href=&quot;#4-Object对象的相关方法&quot; class=&quot;headerlink&quot; title=&quot;4. Object对象的相关方法&quot;&gt;&lt;/a&gt;4. Object对象的相关方法&lt;/h3&gt;&lt;h4 id=&quot;4-1-Object-getPrototypeOf&quot;&gt;&lt;a href=&quot;#4-1-Object-getPrototypeOf&quot; class=&quot;headerlink&quot; title=&quot;4.1 Object.getPrototypeOf()&quot;&gt;&lt;/a&gt;4.1 Object.getPrototypeOf()&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;方法返回参数对象的原型。这是获取原型对象的标准方法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; F = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(f) === F.prototype &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，实例对象&lt;code&gt;f&lt;/code&gt;的原型是&lt;code&gt;F.prototype&lt;/code&gt;。&lt;br&gt;下面是几种特殊对象的原型。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 空对象的原型是 Object.prototype&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(&amp;#123;&amp;#125;) === &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Object.prototype 的原型是 null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype) === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数的原型是 Function.prototype&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(f) === &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS面向对象编程-Object对象的相关方法" scheme="https://codermae.github.io/tags/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-Object%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0028</title>
    <link href="https://codermae.github.io/2021/05/19/%E6%89%93%E5%8D%A10028/"/>
    <id>https://codermae.github.io/2021/05/19/%E6%89%93%E5%8D%A10028/</id>
    <published>2021-05-19T00:54:43.000Z</published>
    <updated>2021-05-22T02:03:09.590Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#2585a6&gt;难过的时候就抱抱自己，允许自己脆弱一会儿，收拾好心情再出发。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS面向对象编程&quot;&gt;&lt;a href=&quot;#JS面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;JS面向对象编程&quot;&gt;&lt;/a&gt;JS面向对象编程&lt;/h2&gt;&lt;h3 id=&quot;3-对象的继承&quot;&gt;&lt;a href=&quot;#3-对象的继承&quot; class=&quot;headerlink&quot; title=&quot;3. 对象的继承&quot;&gt;&lt;/a&gt;3. 对象的继承&lt;/h3&gt;&lt;p&gt;面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。&lt;/p&gt;
&lt;p&gt;大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，JavaScript 语言的继承不通过 class，而是通过“原型对象”（prototype）实现，本章介绍 JavaScript 的原型链继承。&lt;/p&gt;
&lt;p&gt;ES6 引入了 class 语法，基于 class 的继承不在这个教程介绍，请参阅《ES6 标准入门》一书的相关章节。&lt;/p&gt;
&lt;h4 id=&quot;3-1-原型对象的概述&quot;&gt;&lt;a href=&quot;#3-1-原型对象的概述&quot; class=&quot;headerlink&quot; title=&quot;3.1 原型对象的概述&quot;&gt;&lt;/a&gt;3.1 原型对象的概述&lt;/h4&gt;&lt;h5 id=&quot;3-1-1-构造函数的缺点&quot;&gt;&lt;a href=&quot;#3-1-1-构造函数的缺点&quot; class=&quot;headerlink&quot; title=&quot;3.1.1 构造函数的缺点&quot;&gt;&lt;/a&gt;3.1.1 构造函数的缺点&lt;/h5&gt;&lt;p&gt;JavaScript 通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cat&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name, color&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.color = color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cat1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Cat(&lt;span class=&quot;string&quot;&gt;&amp;#x27;大毛&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;白色&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat1.name &lt;span class=&quot;comment&quot;&gt;// &amp;#x27;大毛&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat1.color &lt;span class=&quot;comment&quot;&gt;// &amp;#x27;白色&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS面向对象编程-对象的继承" scheme="https://codermae.github.io/tags/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>打卡0027</title>
    <link href="https://codermae.github.io/2021/05/17/%E6%89%93%E5%8D%A10027/"/>
    <id>https://codermae.github.io/2021/05/17/%E6%89%93%E5%8D%A10027/</id>
    <published>2021-05-17T02:07:18.000Z</published>
    <updated>2021-05-22T02:03:02.302Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#73b9a2&gt;走在未知的道路上，不能停也不能回头。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS面向对象编程&quot;&gt;&lt;a href=&quot;#JS面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;JS面向对象编程&quot;&gt;&lt;/a&gt;JS面向对象编程&lt;/h2&gt;&lt;h3 id=&quot;2-this关键字&quot;&gt;&lt;a href=&quot;#2-this关键字&quot; class=&quot;headerlink&quot; title=&quot;2. this关键字&quot;&gt;&lt;/a&gt;2. this关键字&lt;/h3&gt;&lt;h4 id=&quot;2-1-涵义&quot;&gt;&lt;a href=&quot;#2-1-涵义&quot; class=&quot;headerlink&quot; title=&quot;2.1 涵义&quot;&gt;&lt;/a&gt;2.1 涵义&lt;/h4&gt;&lt;p&gt;&lt;code&gt;this&lt;/code&gt;关键字是一个非常重要的语法点。毫不夸张地说，不理解它的含义，大部分开发任务都无法完成。&lt;br&gt;前一章已经提到，&lt;code&gt;this&lt;/code&gt;可以用在构造函数之中，表示实例对象。除此之外，&lt;code&gt;this&lt;/code&gt;还可以用在别的场合。但不管是什么场合，&lt;code&gt;this&lt;/code&gt;都有一个共同点：它总是返回一个对象。&lt;br&gt;简单说，&lt;code&gt;this&lt;/code&gt;就是属性或方法“当前”所在的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.property&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;this&lt;/code&gt;就代表&lt;code&gt;property&lt;/code&gt;属性当前所在的对象。&lt;br&gt;下面是一个实际的例子。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&amp;#x27;张三&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  describe: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;姓名：&amp;#x27;&lt;/span&gt;+ &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.describe()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;姓名：张三&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS面向对象编程-this关键字" scheme="https://codermae.github.io/tags/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>打卡0026</title>
    <link href="https://codermae.github.io/2021/05/17/%E6%89%93%E5%8D%A10026/"/>
    <id>https://codermae.github.io/2021/05/17/%E6%89%93%E5%8D%A10026/</id>
    <published>2021-05-17T01:01:45.000Z</published>
    <updated>2021-05-22T02:02:54.830Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#8e7437&gt;空荡荡的树上 树叶固执地挂着妄想何方 云身后的昏黄 揭穿了好几颗心的迷惘 杂乱的楼房太遮挡 不认输的脸庞 思念追寻的 那么的相像&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS面向对象编程&quot;&gt;&lt;a href=&quot;#JS面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;JS面向对象编程&quot;&gt;&lt;/a&gt;JS面向对象编程&lt;/h2&gt;&lt;h3 id=&quot;1-实例对象与new命令&quot;&gt;&lt;a href=&quot;#1-实例对象与new命令&quot; class=&quot;headerlink&quot; title=&quot;1. 实例对象与new命令&quot;&gt;&lt;/a&gt;1. 实例对象与new命令&lt;/h3&gt;&lt;h4 id=&quot;1-1-对象是什么&quot;&gt;&lt;a href=&quot;#1-1-对象是什么&quot; class=&quot;headerlink&quot; title=&quot;1.1 对象是什么&quot;&gt;&lt;/a&gt;1.1 对象是什么&lt;/h4&gt;&lt;p&gt;面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。&lt;/p&gt;
&lt;p&gt;每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。对象可以复用，通过继承机制还可以定制。因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。&lt;/p&gt;
&lt;p&gt;那么，“对象”（object）到底是什么？我们从两个层次来理解。&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS面向对象编程-实例对象与new命令" scheme="https://codermae.github.io/tags/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E4%B8%8Enew%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>打卡0025</title>
    <link href="https://codermae.github.io/2021/05/16/%E6%89%93%E5%8D%A10025/"/>
    <id>https://codermae.github.io/2021/05/16/%E6%89%93%E5%8D%A10025/</id>
    <published>2021-05-16T07:21:35.000Z</published>
    <updated>2021-05-22T02:02:39.870Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ffc20e&gt;白日不到处，青春恰自来。苔花如米小，也学牡丹开。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS标准库&quot;&gt;&lt;a href=&quot;#JS标准库&quot; class=&quot;headerlink&quot; title=&quot;JS标准库&quot;&gt;&lt;/a&gt;JS标准库&lt;/h2&gt;&lt;h3 id=&quot;11-JSON对象&quot;&gt;&lt;a href=&quot;#11-JSON对象&quot; class=&quot;headerlink&quot; title=&quot;11. JSON对象&quot;&gt;&lt;/a&gt;11. JSON对象&lt;/h3&gt;&lt;h4 id=&quot;11-1-JSON格式&quot;&gt;&lt;a href=&quot;#11-1-JSON格式&quot; class=&quot;headerlink&quot; title=&quot;11.1 JSON格式&quot;&gt;&lt;/a&gt;11.1 JSON格式&lt;/h4&gt;&lt;p&gt;JSON 格式（JavaScript Object Notation 的缩写）是一种用于数据交换的文本格式，2001年由 Douglas Crockford 提出，目的是取代繁琐笨重的 XML 格式。&lt;/p&gt;
&lt;p&gt;相比 XML 格式，JSON 格式有两个显著的优点：书写简单，一目了然；符合 JavaScript 原生语法，可以由解释引擎直接处理，不用另外添加解析代码。所以，JSON 迅速被接受，已经成为各大网站交换数据的标准格式，并被写入标准。&lt;/p&gt;
&lt;p&gt;每个 JSON 对象就是一个值，可能是一个数组或对象，也可能是一个原始类型的值。总之，只能是一个值，不能是两个或更多的值。&lt;/p&gt;
&lt;p&gt;JSON 对值的类型和格式有严格的规定。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和&lt;code&gt;null&lt;/code&gt;（不能使用&lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串必须使用双引号表示，不能使用单引号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象的键名必须放在双引号里面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组或对象最后一个成员的后面，不能加逗号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS标准库-JSON对象" scheme="https://codermae.github.io/tags/JS%E6%A0%87%E5%87%86%E5%BA%93-JSON%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0024</title>
    <link href="https://codermae.github.io/2021/05/16/%E6%89%93%E5%8D%A10024/"/>
    <id>https://codermae.github.io/2021/05/16/%E6%89%93%E5%8D%A10024/</id>
    <published>2021-05-16T04:51:55.000Z</published>
    <updated>2021-05-22T02:02:33.842Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#afdfe4&gt;真正重要的东西，总是没有的人比拥有的人清楚。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS标准库&quot;&gt;&lt;a href=&quot;#JS标准库&quot; class=&quot;headerlink&quot; title=&quot;JS标准库&quot;&gt;&lt;/a&gt;JS标准库&lt;/h2&gt;&lt;h3 id=&quot;10-RegExp对象&quot;&gt;&lt;a href=&quot;#10-RegExp对象&quot; class=&quot;headerlink&quot; title=&quot;10. RegExp对象&quot;&gt;&lt;/a&gt;10. RegExp对象&lt;/h3&gt;&lt;h4 id=&quot;10-1-概述&quot;&gt;&lt;a href=&quot;#10-1-概述&quot; class=&quot;headerlink&quot; title=&quot;10.1 概述&quot;&gt;&lt;/a&gt;10.1 概述&lt;/h4&gt;&lt;p&gt;正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。&lt;br&gt;新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;regexp&quot;&gt;/xyz/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种是使用&lt;code&gt;RegExp&lt;/code&gt;构造函数。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;xyz&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS标准库-RegExp对象" scheme="https://codermae.github.io/tags/JS%E6%A0%87%E5%87%86%E5%BA%93-RegExp%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0023</title>
    <link href="https://codermae.github.io/2021/05/15/%E6%89%93%E5%8D%A10023/"/>
    <id>https://codermae.github.io/2021/05/15/%E6%89%93%E5%8D%A10023/</id>
    <published>2021-05-15T05:01:26.000Z</published>
    <updated>2021-05-22T02:02:28.150Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#999d9c&gt;生命好在无意义，才容得下各自赋予意义。假如生命是有意义的，这个意义却不合我的志趣，那才尴尬狼狈。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS标准库&quot;&gt;&lt;a href=&quot;#JS标准库&quot; class=&quot;headerlink&quot; title=&quot;JS标准库&quot;&gt;&lt;/a&gt;JS标准库&lt;/h2&gt;&lt;h3 id=&quot;9-Date对象&quot;&gt;&lt;a href=&quot;#9-Date对象&quot; class=&quot;headerlink&quot; title=&quot;9. Date对象&quot;&gt;&lt;/a&gt;9. Date对象&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Date&lt;/code&gt;对象是 JavaScript 原生的时间库。它以国际标准时间（UTC）1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）&lt;/p&gt;
&lt;h4 id=&quot;9-1-普通函数的用法&quot;&gt;&lt;a href=&quot;#9-1-普通函数的用法&quot; class=&quot;headerlink&quot; title=&quot;9.1 普通函数的用法&quot;&gt;&lt;/a&gt;9.1 普通函数的用法&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Date&lt;/code&gt;对象可以作为普通函数直接调用，返回一个代表当前时间的字符串。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，即使带有参数，&lt;code&gt;Date&lt;/code&gt;作为普通函数使用时，返回的还是当前时间。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码说明，无论有没有参数，直接调用&lt;code&gt;Date&lt;/code&gt;总是返回当前时间&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS标准库-Date对象" scheme="https://codermae.github.io/tags/JS%E6%A0%87%E5%87%86%E5%BA%93-Date%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0022</title>
    <link href="https://codermae.github.io/2021/05/15/%E6%89%93%E5%8D%A10022/"/>
    <id>https://codermae.github.io/2021/05/15/%E6%89%93%E5%8D%A10022/</id>
    <published>2021-05-15T04:29:58.000Z</published>
    <updated>2021-05-22T02:02:20.092Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=d71345&gt;把你手给我哈哈哈哈哈&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS标准库&quot;&gt;&lt;a href=&quot;#JS标准库&quot; class=&quot;headerlink&quot; title=&quot;JS标准库&quot;&gt;&lt;/a&gt;JS标准库&lt;/h2&gt;&lt;h3 id=&quot;8-Math对象&quot;&gt;&lt;a href=&quot;#8-Math对象&quot; class=&quot;headerlink&quot; title=&quot;8. Math对象&quot;&gt;&lt;/a&gt;8. Math对象&lt;/h3&gt;&lt;h4 id=&quot;8-1-静态属性&quot;&gt;&lt;a href=&quot;#8-1-静态属性&quot; class=&quot;headerlink&quot; title=&quot;8.1 静态属性&quot;&gt;&lt;/a&gt;8.1 静态属性&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Math&lt;/code&gt;对象的静态属性，提供以下一些数学常数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Math.E&lt;/code&gt;：常数&lt;code&gt;e&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.LN2&lt;/code&gt;：2 的自然对数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.LN10&lt;/code&gt;：10 的自然对数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.LOG2E&lt;/code&gt;：以 2 为底的&lt;code&gt;e&lt;/code&gt;的对数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.LOG10E&lt;/code&gt;：以 10 为底的&lt;code&gt;e&lt;/code&gt;的对数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.PI&lt;/code&gt;：常数&lt;code&gt;π&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.SQRT1_2&lt;/code&gt;：0.5 的平方根。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.SQRT2&lt;/code&gt;：2 的平方根。</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS标准库-Math对象" scheme="https://codermae.github.io/tags/JS%E6%A0%87%E5%87%86%E5%BA%93-Math%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0021</title>
    <link href="https://codermae.github.io/2021/05/14/%E6%89%93%E5%8D%A10021/"/>
    <id>https://codermae.github.io/2021/05/14/%E6%89%93%E5%8D%A10021/</id>
    <published>2021-05-14T07:19:14.000Z</published>
    <updated>2021-05-22T02:04:26.911Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#fcaf17&gt;希望你活得尽兴，而不是过的庆幸&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS标准库&quot;&gt;&lt;a href=&quot;#JS标准库&quot; class=&quot;headerlink&quot; title=&quot;JS标准库&quot;&gt;&lt;/a&gt;JS标准库&lt;/h2&gt;&lt;h3 id=&quot;7-String对象&quot;&gt;&lt;a href=&quot;#7-String对象&quot; class=&quot;headerlink&quot; title=&quot;7. String对象&quot;&gt;&lt;/a&gt;7. String对象&lt;/h3&gt;&lt;h4 id=&quot;7-1-概述&quot;&gt;&lt;a href=&quot;#7-1-概述&quot; class=&quot;headerlink&quot; title=&quot;7.1 概述&quot;&gt;&lt;/a&gt;7.1 概述&lt;/h4&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s1 = &lt;span class=&quot;string&quot;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; s1 &lt;span class=&quot;comment&quot;&gt;// &amp;quot;string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; s2 &lt;span class=&quot;comment&quot;&gt;// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s2.valueOf() &lt;span class=&quot;comment&quot;&gt;// &amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS标准库-String对象" scheme="https://codermae.github.io/tags/JS%E6%A0%87%E5%87%86%E5%BA%93-String%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>打卡0020</title>
    <link href="https://codermae.github.io/2021/05/14/%E6%89%93%E5%8D%A10020/"/>
    <id>https://codermae.github.io/2021/05/14/%E6%89%93%E5%8D%A10020/</id>
    <published>2021-05-14T06:36:46.000Z</published>
    <updated>2021-05-22T02:02:05.109Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#1d953f&gt;即使不开心也不要愁眉不展，因为你不知道谁会爱上你的笑容。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS标准库&quot;&gt;&lt;a href=&quot;#JS标准库&quot; class=&quot;headerlink&quot; title=&quot;JS标准库&quot;&gt;&lt;/a&gt;JS标准库&lt;/h2&gt;&lt;h3 id=&quot;6-Number对象&quot;&gt;&lt;a href=&quot;#6-Number对象&quot; class=&quot;headerlink&quot; title=&quot;6. Number对象&quot;&gt;&lt;/a&gt;6. Number对象&lt;/h3&gt;&lt;h4 id=&quot;6-1-概述&quot;&gt;&lt;a href=&quot;#6-1-概述&quot; class=&quot;headerlink&quot; title=&quot;6.1 概述&quot;&gt;&lt;/a&gt;6.1 概述&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Number&lt;/code&gt;对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。&lt;br&gt;作为构造函数时，它用于生成值为数值的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; n &lt;span class=&quot;comment&quot;&gt;// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS" scheme="https://codermae.github.io/categories/JS/"/>
    
    
    <category term="JS标准库-Number对象" scheme="https://codermae.github.io/tags/JS%E6%A0%87%E5%87%86%E5%BA%93-Number%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
