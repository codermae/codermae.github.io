<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maeBlog</title>
  
  
  <link href="https://codermae.github.io/atom.xml" rel="self"/>
  
  <link href="https://codermae.github.io/"/>
  <updated>2021-09-15T13:15:12.039Z</updated>
  <id>https://codermae.github.io/</id>
  
  <author>
    <name>Ye Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>专业踩坑</title>
    <link href="https://codermae.github.io/2021/09/15/%E4%B8%93%E4%B8%9A%E8%B8%A9%E5%9D%91/"/>
    <id>https://codermae.github.io/2021/09/15/%E4%B8%93%E4%B8%9A%E8%B8%A9%E5%9D%91/</id>
    <published>2021-09-15T13:07:46.000Z</published>
    <updated>2021-09-15T13:15:12.039Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;踩坑记录&quot;&gt;&lt;a href=&quot;#踩坑记录&quot; class=&quot;headerlink&quot; title=&quot;踩坑记录&quot;&gt;&lt;/a&gt;踩坑记录&lt;/h2&gt;&lt;h4 id=&quot;2021-09-15&quot;&gt;&lt;a href=&quot;#2021-09-15&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="踩坑" scheme="https://codermae.github.io/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
    <category term="踩坑" scheme="https://codermae.github.io/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>Chart文件说明</title>
    <link href="https://codermae.github.io/2021/09/10/Chart%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/"/>
    <id>https://codermae.github.io/2021/09/10/Chart%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</id>
    <published>2021-09-10T10:41:21.000Z</published>
    <updated>2021-09-13T07:13:43.234Z</updated>
    
    
    <summary type="html">&lt;p&gt;all&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>打卡0092</title>
    <link href="https://codermae.github.io/2021/08/29/%E6%89%93%E5%8D%A10092/"/>
    <id>https://codermae.github.io/2021/08/29/%E6%89%93%E5%8D%A10092/</id>
    <published>2021-08-29T04:43:41.000Z</published>
    <updated>2021-08-31T11:36:23.059Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#dea32c&gt;不害怕改变，才是给自己最好的安全感。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;19-async-函数&quot;&gt;&lt;a href=&quot;#19-async-函数&quot; class=&quot;headerlink&quot; title=&quot;19. async 函数&quot;&gt;&lt;/a&gt;19. async 函数&lt;/h3&gt;&lt;h4 id=&quot;19-1-含义&quot;&gt;&lt;a href=&quot;#19-1-含义&quot; class=&quot;headerlink&quot; title=&quot;19.1 含义&quot;&gt;&lt;/a&gt;19.1 含义&lt;/h4&gt;&lt;p&gt;ES2017 标准引入了 async 函数，使得异步操作变得更加方便。&lt;/p&gt;
&lt;p&gt;async 函数是什么？一句话，它就是 Generator 函数的语法糖。&lt;/p&gt;
&lt;p&gt;前文有一个 Generator 函数，依次读取两个文件。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;fs&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; readFile = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;fileName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs.readFile(fileName, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reject(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resolve(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; gen = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; f1 = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; readFile(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/etc/fstab&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; f2 = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; readFile(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/etc/shells&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f1.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f2.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码的函数&lt;code&gt;gen&lt;/code&gt;可以写成&lt;code&gt;async&lt;/code&gt;函数，就是下面这样。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; asyncReadFile = &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; f1 = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; readFile(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/etc/fstab&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; f2 = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; readFile(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/etc/shells&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f1.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f2.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一比较就会发现，&lt;code&gt;async&lt;/code&gt;函数就是将 Generator 函数的星号（&lt;code&gt;*&lt;/code&gt;）替换成&lt;code&gt;async&lt;/code&gt;，将&lt;code&gt;yield&lt;/code&gt;替换成&lt;code&gt;await&lt;/code&gt;，仅此而已。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 async 函数" scheme="https://codermae.github.io/tags/JS-ES6-async-%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>打卡0091</title>
    <link href="https://codermae.github.io/2021/08/27/%E6%89%93%E5%8D%A10091/"/>
    <id>https://codermae.github.io/2021/08/27/%E6%89%93%E5%8D%A10091/</id>
    <published>2021-08-27T07:24:18.000Z</published>
    <updated>2021-08-29T04:45:17.145Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#2468a2&gt;生命，就是一场不留余地的盛放。心安，便是活着的最美好状态。平淡是生活的主线，精彩是人生的点缀。且安静，且放低，且自在，不张扬，也不颓废，这就是生活。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;18-Generator-函数的异步应用&quot;&gt;&lt;a href=&quot;#18-Generator-函数的异步应用&quot; class=&quot;headerlink&quot; title=&quot;18. Generator 函数的异步应用&quot;&gt;&lt;/a&gt;18. Generator 函数的异步应用&lt;/h3&gt;&lt;p&gt;异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。&lt;/p&gt;
&lt;h4 id=&quot;18-1-传统方法&quot;&gt;&lt;a href=&quot;#18-1-传统方法&quot; class=&quot;headerlink&quot; title=&quot;18.1 传统方法&quot;&gt;&lt;/a&gt;18.1 传统方法&lt;/h4&gt;&lt;p&gt;ES6 诞生以前，异步编程的方法，大概有下面四种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回调函数&lt;/li&gt;
&lt;li&gt;事件监听&lt;/li&gt;
&lt;li&gt;发布/订阅&lt;/li&gt;
&lt;li&gt;Promise 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generator 函数将 JavaScript 异步编程带入了一个全新的阶段。&lt;/p&gt;
&lt;h4 id=&quot;18-2-基本概念&quot;&gt;&lt;a href=&quot;#18-2-基本概念&quot; class=&quot;headerlink&quot; title=&quot;18.2 基本概念&quot;&gt;&lt;/a&gt;18.2 基本概念&lt;/h4&gt;&lt;h5 id=&quot;18-2-1-异步&quot;&gt;&lt;a href=&quot;#18-2-1-异步&quot; class=&quot;headerlink&quot; title=&quot;18.2.1 异步&quot;&gt;&lt;/a&gt;18.2.1 异步&lt;/h5&gt;&lt;p&gt;所谓”异步”，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。&lt;/p&gt;
&lt;p&gt;比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。&lt;/p&gt;
&lt;p&gt;相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Generator 函数的异步应用" scheme="https://codermae.github.io/tags/JS-ES6-Generator-%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>打卡0090</title>
    <link href="https://codermae.github.io/2021/08/25/%E6%89%93%E5%8D%A10090/"/>
    <id>https://codermae.github.io/2021/08/25/%E6%89%93%E5%8D%A10090/</id>
    <published>2021-08-25T07:01:39.000Z</published>
    <updated>2021-08-26T10:49:01.961Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#b2d235&gt;爱在日常，才不寻常。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;17-Generator-函数的语法&quot;&gt;&lt;a href=&quot;#17-Generator-函数的语法&quot; class=&quot;headerlink&quot; title=&quot;17. Generator 函数的语法&quot;&gt;&lt;/a&gt;17. Generator 函数的语法&lt;/h3&gt;&lt;h4 id=&quot;17-1-简介&quot;&gt;&lt;a href=&quot;#17-1-简介&quot; class=&quot;headerlink&quot; title=&quot;17.1 简介&quot;&gt;&lt;/a&gt;17.1 简介&lt;/h4&gt;&lt;h5 id=&quot;17-1-1-基本概念&quot;&gt;&lt;a href=&quot;#17-1-1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;17.1.1 基本概念&quot;&gt;&lt;/a&gt;17.1.1 基本概念&lt;/h5&gt;&lt;p&gt;Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。&lt;/p&gt;
&lt;p&gt;Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。&lt;/p&gt;
&lt;p&gt;执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。&lt;/p&gt;
&lt;p&gt;形式上，Generator 函数是一个普通函数，但是有两个特征。一是，&lt;code&gt;function&lt;/code&gt;关键字与函数名之间有一个星号；二是，函数体内部使用&lt;code&gt;yield&lt;/code&gt;表达式，定义不同的内部状态（&lt;code&gt;yield&lt;/code&gt;在英语里的意思就是“产出”）。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;helloWorldGenerator&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;world&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;ending&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hw = helloWorldGenerator();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码定义了一个 &lt;code&gt;Generator&lt;/code&gt; 函数&lt;code&gt;helloWorldGenerator&lt;/code&gt;，它内部有两个&lt;code&gt;yield&lt;/code&gt;表达式（&lt;code&gt;hello&lt;/code&gt;和&lt;code&gt;world&lt;/code&gt;），即该函数有三个状态：hello，world 和 return 语句（结束执行）。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Generator 函数的语法" scheme="https://codermae.github.io/tags/JS-ES6-Generator-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0089</title>
    <link href="https://codermae.github.io/2021/08/24/%E6%89%93%E5%8D%A10089/"/>
    <id>https://codermae.github.io/2021/08/24/%E6%89%93%E5%8D%A10089/</id>
    <published>2021-08-24T08:59:18.000Z</published>
    <updated>2021-08-24T10:58:39.618Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#d5c59f&gt;收拾起心情，继续走吧，错过花，你将收获雨，错过这一个，你才会遇到下一个。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;16-Iterator-和-for…of-循环&quot;&gt;&lt;a href=&quot;#16-Iterator-和-for…of-循环&quot; class=&quot;headerlink&quot; title=&quot;16. Iterator 和 for…of 循环&quot;&gt;&lt;/a&gt;16. Iterator 和 for…of 循环&lt;/h3&gt;&lt;h4 id=&quot;16-1-Iterator（遍历器）的概念&quot;&gt;&lt;a href=&quot;#16-1-Iterator（遍历器）的概念&quot; class=&quot;headerlink&quot; title=&quot;16.1 Iterator（遍历器）的概念&quot;&gt;&lt;/a&gt;16.1 Iterator（遍历器）的概念&lt;/h4&gt;&lt;p&gt;JavaScript 原有的表示“集合”的数据结构，主要是数组（&lt;code&gt;Array&lt;/code&gt;）和对象（&lt;code&gt;Object&lt;/code&gt;），ES6 又添加了&lt;code&gt;Map&lt;/code&gt;和&lt;code&gt;Set&lt;/code&gt;。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。&lt;/p&gt;
&lt;p&gt;遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。&lt;/p&gt;
&lt;p&gt;Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令&lt;code&gt;for...of&lt;/code&gt;循环，Iterator 接口主要供&lt;code&gt;for...of&lt;/code&gt;消费。&lt;/p&gt;
&lt;p&gt;Iterator 的遍历过程是这样的。&lt;/p&gt;
&lt;p&gt;（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。&lt;/p&gt;
&lt;p&gt;（2）第一次调用指针对象的&lt;code&gt;next&lt;/code&gt;方法，可以将指针指向数据结构的第一个成员。&lt;/p&gt;
&lt;p&gt;（3）第二次调用指针对象的&lt;code&gt;next&lt;/code&gt;方法，指针就指向数据结构的第二个成员。&lt;/p&gt;
&lt;p&gt;（4）不断调用指针对象的&lt;code&gt;next&lt;/code&gt;方法，直到它指向数据结构的结束位置。&lt;/p&gt;
&lt;p&gt;每一次调用&lt;code&gt;next&lt;/code&gt;方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含&lt;code&gt;value&lt;/code&gt;和&lt;code&gt;done&lt;/code&gt;两个属性的对象。其中，&lt;code&gt;value&lt;/code&gt;属性是当前成员的值，&lt;code&gt;done&lt;/code&gt;属性是一个布尔值，表示遍历是否结束。&lt;/p&gt;
&lt;p&gt;下面是一个模拟&lt;code&gt;next&lt;/code&gt;方法返回值的例子。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Iterator 和 for...of 循环" scheme="https://codermae.github.io/tags/JS-ES6-Iterator-%E5%92%8C-for-of-%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>打卡0088</title>
    <link href="https://codermae.github.io/2021/08/21/%E6%89%93%E5%8D%A10088/"/>
    <id>https://codermae.github.io/2021/08/21/%E6%89%93%E5%8D%A10088/</id>
    <published>2021-08-21T06:50:43.000Z</published>
    <updated>2021-08-23T14:09:49.013Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#50b7c1&gt;世界可以无聊，但你要有趣，生活可能不如意，但你要过得有诗意。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;15-Promise-对象&quot;&gt;&lt;a href=&quot;#15-Promise-对象&quot; class=&quot;headerlink&quot; title=&quot;15. Promise 对象&quot;&gt;&lt;/a&gt;15. Promise 对象&lt;/h3&gt;&lt;h4 id=&quot;15-1-Promise-的含义&quot;&gt;&lt;a href=&quot;#15-1-Promise-的含义&quot; class=&quot;headerlink&quot; title=&quot;15.1 Promise 的含义&quot;&gt;&lt;/a&gt;15.1 Promise 的含义&lt;/h4&gt;&lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了&lt;code&gt;Promise&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;所谓&lt;code&gt;Promise&lt;/code&gt;，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;对象有以下两个特点。&lt;/p&gt;
&lt;p&gt;（1）对象的状态不受外界影响。&lt;code&gt;Promise&lt;/code&gt;对象代表一个异步操作，有三种状态：&lt;code&gt;pending&lt;/code&gt;（进行中）、&lt;code&gt;fulfilled&lt;/code&gt;（已成功）和&lt;code&gt;rejected&lt;/code&gt;（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是&lt;code&gt;Promise&lt;/code&gt;这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。&lt;/p&gt;
&lt;p&gt;（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。&lt;code&gt;Promise&lt;/code&gt;对象的状态改变，只有两种可能：从&lt;code&gt;pending&lt;/code&gt;变为&lt;code&gt;fulfilled&lt;/code&gt;和从&lt;code&gt;pending&lt;/code&gt;变为&lt;code&gt;rejected&lt;/code&gt;。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对&lt;code&gt;Promise&lt;/code&gt;对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。&lt;/p&gt;
&lt;p&gt;注意，为了行文方便，本章后面的&lt;code&gt;resolved&lt;/code&gt;统一只指&lt;code&gt;fulfilled&lt;/code&gt;状态，不包含&lt;code&gt;rejected&lt;/code&gt;状态。&lt;/p&gt;
&lt;p&gt;有了&lt;code&gt;Promise&lt;/code&gt;对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，&lt;code&gt;Promise&lt;/code&gt;对象提供统一的接口，使得控制异步操作更加容易。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;也有一些缺点。首先，无法取消&lt;code&gt;Promise&lt;/code&gt;，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，&lt;code&gt;Promise&lt;/code&gt;内部抛出的错误，不会反应到外部。第三，当处于&lt;code&gt;pending&lt;/code&gt;状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。&lt;/p&gt;
&lt;p&gt;如果某些事件不断地反复发生，一般来说，使用 Stream 模式是比部署&lt;code&gt;Promise&lt;/code&gt;更好的选择。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Promise" scheme="https://codermae.github.io/tags/JS-ES6-Promise/"/>
    
  </entry>
  
  <entry>
    <title>打卡0087</title>
    <link href="https://codermae.github.io/2021/08/19/%E6%89%93%E5%8D%A10087/"/>
    <id>https://codermae.github.io/2021/08/19/%E6%89%93%E5%8D%A10087/</id>
    <published>2021-08-19T09:54:36.000Z</published>
    <updated>2021-08-20T11:06:11.510Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#f05b72&gt;不开心时，做个深呼吸，不过是糟糕的一天而已，又不是糟糕一辈子。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;14-Reflect&quot;&gt;&lt;a href=&quot;#14-Reflect&quot; class=&quot;headerlink&quot; title=&quot;14. Reflect&quot;&gt;&lt;/a&gt;14. Reflect&lt;/h3&gt;&lt;h4 id=&quot;14-1-概述&quot;&gt;&lt;a href=&quot;#14-1-概述&quot; class=&quot;headerlink&quot; title=&quot;14.1 概述&quot;&gt;&lt;/a&gt;14.1 概述&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Reflect&lt;/code&gt;对象与&lt;code&gt;Proxy&lt;/code&gt;对象一样，也是 ES6 为了操作对象而提供的新 API。&lt;code&gt;Reflect&lt;/code&gt;对象的设计目的有这样几个。&lt;/p&gt;
&lt;p&gt;（1） 将&lt;code&gt;Object&lt;/code&gt;对象的一些明显属于语言内部的方法（比如&lt;code&gt;Object.defineProperty&lt;/code&gt;），放到&lt;code&gt;Reflect&lt;/code&gt;对象上。现阶段，某些方法同时在&lt;code&gt;Object&lt;/code&gt;和&lt;code&gt;Reflect&lt;/code&gt;对象上部署，未来的新方法将只部署在&lt;code&gt;Reflect&lt;/code&gt;对象上。也就是说，从&lt;code&gt;Reflect&lt;/code&gt;对象上可以拿到语言内部的方法。&lt;/p&gt;
&lt;p&gt;（2） 修改某些&lt;code&gt;Object&lt;/code&gt;方法的返回结果，让其变得更合理。比如，&lt;code&gt;Object.defineProperty(obj, name, desc)&lt;/code&gt;在无法定义属性时，会抛出一个错误，而&lt;code&gt;Reflect.defineProperty(obj, name, desc)&lt;/code&gt;则会返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 老写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(target, property, attributes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// failure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 新写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Reflect&lt;/span&gt;.defineProperty(target, property, attributes)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// failure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Reflect" scheme="https://codermae.github.io/tags/JS-ES6-Reflect/"/>
    
  </entry>
  
  <entry>
    <title>打卡0086</title>
    <link href="https://codermae.github.io/2021/07/09/%E6%89%93%E5%8D%A10086/"/>
    <id>https://codermae.github.io/2021/07/09/%E6%89%93%E5%8D%A10086/</id>
    <published>2021-07-09T01:54:36.000Z</published>
    <updated>2021-08-19T08:30:42.750Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#6950a1&gt;每个人都会累，没人能为你承担所有的伤悲，人总有那么一段时间要学会自己长大。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;13-Proxy&quot;&gt;&lt;a href=&quot;#13-Proxy&quot; class=&quot;headerlink&quot; title=&quot;13. Proxy&quot;&gt;&lt;/a&gt;13. Proxy&lt;/h3&gt;&lt;h4 id=&quot;13-1-概述&quot;&gt;&lt;a href=&quot;#13-1-概述&quot; class=&quot;headerlink&quot; title=&quot;13.1 概述&quot;&gt;&lt;/a&gt;13.1 概述&lt;/h4&gt;&lt;p&gt;Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。&lt;/p&gt;
&lt;p&gt;Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;(&amp;#123;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;target, propKey, receiver&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`getting &lt;span class=&quot;subst&quot;&gt;$&amp;#123;propKey&amp;#125;&lt;/span&gt;!`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Reflect&lt;/span&gt;.get(target, propKey, receiver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;target, propKey, value, receiver&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`setting &lt;span class=&quot;subst&quot;&gt;$&amp;#123;propKey&amp;#125;&lt;/span&gt;!`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Reflect&lt;/span&gt;.set(target, propKey, value, receiver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码对一个空对象架设了一层拦截，重定义了属性的读取（&lt;code&gt;get&lt;/code&gt;）和设置（&lt;code&gt;set&lt;/code&gt;）行为。这里暂时先不解释具体的语法，只看运行结果。对设置了拦截行为的对象&lt;code&gt;obj&lt;/code&gt;，去读写它的属性，就会得到下面的结果。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Proxy" scheme="https://codermae.github.io/tags/JS-ES6-Proxy/"/>
    
  </entry>
  
  <entry>
    <title>打卡0085</title>
    <link href="https://codermae.github.io/2021/07/08/%E6%89%93%E5%8D%A10085/"/>
    <id>https://codermae.github.io/2021/07/08/%E6%89%93%E5%8D%A10085/</id>
    <published>2021-07-08T01:26:19.000Z</published>
    <updated>2021-07-08T01:51:15.734Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#c99979&gt;一想二干三成功，一等二看三落空。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;12-Set-和-Map-数据结构&quot;&gt;&lt;a href=&quot;#12-Set-和-Map-数据结构&quot; class=&quot;headerlink&quot; title=&quot;12.Set 和 Map 数据结构&quot;&gt;&lt;/a&gt;12.Set 和 Map 数据结构&lt;/h3&gt;&lt;h4 id=&quot;12-1-Set&quot;&gt;&lt;a href=&quot;#12-1-Set&quot; class=&quot;headerlink&quot; title=&quot;12.1 Set&quot;&gt;&lt;/a&gt;12.1 Set&lt;/h4&gt;&lt;h5 id=&quot;12-1-1-基本用法&quot;&gt;&lt;a href=&quot;#12-1-1-基本用法&quot; class=&quot;headerlink&quot; title=&quot;12.1.1 基本用法&quot;&gt;&lt;/a&gt;12.1.1 基本用法&lt;/h5&gt;&lt;p&gt;ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set&lt;/code&gt;本身是一个构造函数，用来生成 Set 数据结构。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; s.add(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2 3 5 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码通过&lt;code&gt;add()&lt;/code&gt;方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set&lt;/code&gt;函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Set 和 Map 数据结构" scheme="https://codermae.github.io/tags/JS-ES6-Set-%E5%92%8C-Map-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>打卡0083</title>
    <link href="https://codermae.github.io/2021/07/07/%E6%89%93%E5%8D%A10083/"/>
    <id>https://codermae.github.io/2021/07/07/%E6%89%93%E5%8D%A10083/</id>
    <published>2021-07-07T02:42:21.000Z</published>
    <updated>2021-07-07T08:24:18.890Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#6f599c&gt;人间的面，见一面少一面。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;11-Symbol&quot;&gt;&lt;a href=&quot;#11-Symbol&quot; class=&quot;headerlink&quot; title=&quot;11. Symbol&quot;&gt;&lt;/a&gt;11. Symbol&lt;/h3&gt;&lt;h4 id=&quot;11-1-概述&quot;&gt;&lt;a href=&quot;#11-1-概述&quot; class=&quot;headerlink&quot; title=&quot;11.1 概述&quot;&gt;&lt;/a&gt;11.1 概述&lt;/h4&gt;&lt;p&gt;ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入&lt;code&gt;Symbol&lt;/code&gt;的原因。&lt;/p&gt;
&lt;p&gt;ES6 引入了一种新的原始数据类型&lt;code&gt;Symbol&lt;/code&gt;，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。&lt;/p&gt;
&lt;p&gt;Symbol 值通过&lt;code&gt;Symbol&lt;/code&gt;函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;symbol&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，变量&lt;code&gt;s&lt;/code&gt;就是一个独一无二的值。&lt;code&gt;typeof&lt;/code&gt;运算符的结果，表明变量&lt;code&gt;s&lt;/code&gt;是 Symbol 数据类型，而不是字符串之类的其他类型。&lt;/p&gt;
&lt;p&gt;注意，&lt;code&gt;Symbol&lt;/code&gt;函数前不能使用&lt;code&gt;new&lt;/code&gt;命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 Symbol" scheme="https://codermae.github.io/tags/JS-ES6-Symbol/"/>
    
  </entry>
  
  <entry>
    <title>打卡0082</title>
    <link href="https://codermae.github.io/2021/07/05/%E6%89%93%E5%8D%A10082/"/>
    <id>https://codermae.github.io/2021/07/05/%E6%89%93%E5%8D%A10082/</id>
    <published>2021-07-05T01:07:59.000Z</published>
    <updated>2021-07-07T08:24:20.180Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ef5b9c&gt;当一个人放弃追问，衰老这就开始了。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;10-对象的新增方法&quot;&gt;&lt;a href=&quot;#10-对象的新增方法&quot; class=&quot;headerlink&quot; title=&quot;10.对象的新增方法&quot;&gt;&lt;/a&gt;10.对象的新增方法&lt;/h3&gt;&lt;h4 id=&quot;10-1-Object-is&quot;&gt;&lt;a href=&quot;#10-1-Object-is&quot; class=&quot;headerlink&quot; title=&quot;10.1 Object.is()&quot;&gt;&lt;/a&gt;10.1 Object.is()&lt;/h4&gt;&lt;p&gt;ES5 比较两个值是否相等，只有两个运算符：相等运算符（&lt;code&gt;==&lt;/code&gt;）和严格相等运算符（&lt;code&gt;===&lt;/code&gt;）。它们都有缺点，前者会自动转换数据类型，后者的&lt;code&gt;NaN&lt;/code&gt;不等于自身，以及&lt;code&gt;+0&lt;/code&gt;等于&lt;code&gt;-0&lt;/code&gt;。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。&lt;/p&gt;
&lt;p&gt;ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。&lt;code&gt;Object.is&lt;/code&gt;就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（&lt;code&gt;===&lt;/code&gt;）的行为基本一致。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is(&lt;span class=&quot;string&quot;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is(&amp;#123;&amp;#125;, &amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同之处只有两个：一是&lt;code&gt;+0&lt;/code&gt;不等于&lt;code&gt;-0&lt;/code&gt;，二是&lt;code&gt;NaN&lt;/code&gt;等于自身。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; === -&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt; === &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is(+&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 对象的新增方法" scheme="https://codermae.github.io/tags/JS-ES6-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0081</title>
    <link href="https://codermae.github.io/2021/07/03/%E6%89%93%E5%8D%A10081/"/>
    <id>https://codermae.github.io/2021/07/03/%E6%89%93%E5%8D%A10081/</id>
    <published>2021-07-03T01:24:41.000Z</published>
    <updated>2021-07-07T08:24:21.242Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;font color=#7bbfea&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/font&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当我使用其它网站上爬取下来的的图片链接时，加载403&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="积累" scheme="https://codermae.github.io/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="PHP" scheme="https://codermae.github.io/tags/PHP/"/>
    
    <category term="HTML" scheme="https://codermae.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>打卡0080</title>
    <link href="https://codermae.github.io/2021/06/28/%E6%89%93%E5%8D%A10080/"/>
    <id>https://codermae.github.io/2021/06/28/%E6%89%93%E5%8D%A10080/</id>
    <published>2021-06-28T02:42:34.000Z</published>
    <updated>2021-07-06T07:22:26.466Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#fedcbd&gt;旅途匆忙，人生漫长。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;9-对象的扩展&quot;&gt;&lt;a href=&quot;#9-对象的扩展&quot; class=&quot;headerlink&quot; title=&quot;9.对象的扩展&quot;&gt;&lt;/a&gt;9.对象的扩展&lt;/h3&gt;&lt;p&gt;对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍Object对象的新增方法。&lt;/p&gt;
&lt;h4 id=&quot;9-1-属性的简洁表示法&quot;&gt;&lt;a href=&quot;#9-1-属性的简洁表示法&quot; class=&quot;headerlink&quot; title=&quot;9.1 属性的简洁表示法&quot;&gt;&lt;/a&gt;9.1 属性的简洁表示法&lt;/h4&gt;&lt;p&gt;ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;string&quot;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; baz = &amp;#123;foo&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz &lt;span class=&quot;comment&quot;&gt;// &amp;#123;foo: &amp;quot;bar&amp;quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; baz = &amp;#123;&lt;span class=&quot;attr&quot;&gt;foo&lt;/span&gt;: foo&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，变量&lt;code&gt;foo&lt;/code&gt;直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值。下面是另一个例子。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;x, y&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: x, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: y&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Object &amp;#123;x: 1, y: 2&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了属性简写，方法也可以简写。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 对象的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0079</title>
    <link href="https://codermae.github.io/2021/06/27/%E6%89%93%E5%8D%A10079/"/>
    <id>https://codermae.github.io/2021/06/27/%E6%89%93%E5%8D%A10079/</id>
    <published>2021-06-27T07:17:54.000Z</published>
    <updated>2021-06-28T02:41:11.461Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#faa755&gt;有三分钟热度，就有三分钟收获。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;9-数组的扩展&quot;&gt;&lt;a href=&quot;#9-数组的扩展&quot; class=&quot;headerlink&quot; title=&quot;9. 数组的扩展&quot;&gt;&lt;/a&gt;9. 数组的扩展&lt;/h3&gt;&lt;h4 id=&quot;9-1-扩展运算符&quot;&gt;&lt;a href=&quot;#9-1-扩展运算符&quot; class=&quot;headerlink&quot; title=&quot;9.1 扩展运算符&quot;&gt;&lt;/a&gt;9.1 扩展运算符&lt;/h4&gt;&lt;h5 id=&quot;9-1-1-含义&quot;&gt;&lt;a href=&quot;#9-1-1-含义&quot; class=&quot;headerlink&quot; title=&quot;9.1.1 含义&quot;&gt;&lt;/a&gt;9.1.1 含义&lt;/h5&gt;&lt;p&gt;扩展运算符（spread）是三个点（&lt;code&gt;...&lt;/code&gt;）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(...[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, ...[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1 2 3 4 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...document.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&amp;#x27;div&amp;#x27;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&amp;lt;div&amp;gt;, &amp;lt;div&amp;gt;, &amp;lt;div&amp;gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该运算符主要用于函数调用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, ...items&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  array.push(...items);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add(...numbers) &lt;span class=&quot;comment&quot;&gt;// 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;array.push(...items)&lt;/code&gt;和&lt;code&gt;add(...numbers)&lt;/code&gt;这两行，都是函数的调用，它们都使用了扩展运算符。该运算符将一个数组，变为参数序列。&lt;/p&gt;
&lt;p&gt;扩展运算符与正常的函数参数可以结合使用，非常灵活。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 数组的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0078</title>
    <link href="https://codermae.github.io/2021/06/26/%E6%89%93%E5%8D%A10078/"/>
    <id>https://codermae.github.io/2021/06/26/%E6%89%93%E5%8D%A10078/</id>
    <published>2021-06-26T07:46:00.000Z</published>
    <updated>2021-06-27T07:15:44.772Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#33a3dc&gt;为了理想的实现，航行的孤独在所难免。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;8-函数的扩展&quot;&gt;&lt;a href=&quot;#8-函数的扩展&quot; class=&quot;headerlink&quot; title=&quot;8. 函数的扩展&quot;&gt;&lt;/a&gt;8. 函数的扩展&lt;/h3&gt;&lt;h4 id=&quot;8-1-函数参数的默认值&quot;&gt;&lt;a href=&quot;#8-1-函数参数的默认值&quot; class=&quot;headerlink&quot; title=&quot;8.1 函数参数的默认值&quot;&gt;&lt;/a&gt;8.1 函数参数的默认值&lt;/h4&gt;&lt;h5 id=&quot;8-1-1-基本用法&quot;&gt;&lt;a href=&quot;#8-1-1-基本用法&quot; class=&quot;headerlink&quot; title=&quot;8.1.1 基本用法&quot;&gt;&lt;/a&gt;8.1.1 基本用法&lt;/h5&gt;&lt;p&gt;ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  y = y || &lt;span class=&quot;string&quot;&gt;&amp;#x27;World&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Hello World&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;China&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Hello China&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Hello World&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码检查函数&lt;code&gt;log&lt;/code&gt;的参数&lt;code&gt;y&lt;/code&gt;有没有赋值，如果没有，则指定默认值为&lt;code&gt;World&lt;/code&gt;。这种写法的缺点在于，如果参数&lt;code&gt;y&lt;/code&gt;赋值了，但是对应的布尔值为&lt;code&gt;false&lt;/code&gt;，则该赋值不起作用。就像上面代码的最后一行，参数&lt;code&gt;y&lt;/code&gt;等于空字符，结果被改为默认值。&lt;/p&gt;
&lt;p&gt;为了避免这个问题，通常需要先判断一下参数&lt;code&gt;y&lt;/code&gt;是否被赋值，如果没有，再等于默认值。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; y === &lt;span class=&quot;string&quot;&gt;&amp;#x27;undefined&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  y = &lt;span class=&quot;string&quot;&gt;&amp;#x27;World&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 函数的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0077</title>
    <link href="https://codermae.github.io/2021/06/25/%E6%89%93%E5%8D%A10077/"/>
    <id>https://codermae.github.io/2021/06/25/%E6%89%93%E5%8D%A10077/</id>
    <published>2021-06-25T02:21:45.000Z</published>
    <updated>2021-06-27T07:16:47.927Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#78cdd1&gt;有时间就出去走走，能走多远就走多远。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;7-数值的扩展&quot;&gt;&lt;a href=&quot;#7-数值的扩展&quot; class=&quot;headerlink&quot; title=&quot;7.数值的扩展&quot;&gt;&lt;/a&gt;7.数值的扩展&lt;/h3&gt;&lt;h4 id=&quot;7-1-二进制和八进制表示法&quot;&gt;&lt;a href=&quot;#7-1-二进制和八进制表示法&quot; class=&quot;headerlink&quot; title=&quot;7.1 二进制和八进制表示法&quot;&gt;&lt;/a&gt;7.1 二进制和八进制表示法&lt;/h4&gt;&lt;p&gt;ES6 提供了二进制和八进制数值的新的写法，分别用前缀&lt;code&gt;0b&lt;/code&gt;（或&lt;code&gt;0B&lt;/code&gt;）和&lt;code&gt;0o&lt;/code&gt;（或&lt;code&gt;0O&lt;/code&gt;）表示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0b111110111&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0o767&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀&lt;code&gt;0&lt;/code&gt;表示，ES6 进一步明确，要使用前缀&lt;code&gt;0o&lt;/code&gt;表示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 非严格模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;0o11&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;011&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)() &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 严格模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;  &amp;#x27;use strict&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;0o11&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;011&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)() &lt;span class=&quot;comment&quot;&gt;// Uncaught SyntaxError: Octal literals are not allowed in strict mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要将&lt;code&gt;0b&lt;/code&gt;和&lt;code&gt;0o&lt;/code&gt;前缀的字符串数值转为十进制，要使用&lt;code&gt;Number&lt;/code&gt;方法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;0b111&amp;#x27;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;0o10&amp;#x27;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 数值的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0076</title>
    <link href="https://codermae.github.io/2021/06/20/%E6%89%93%E5%8D%A10076/"/>
    <id>https://codermae.github.io/2021/06/20/%E6%89%93%E5%8D%A10076/</id>
    <published>2021-06-20T07:34:26.000Z</published>
    <updated>2021-06-25T02:19:29.379Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#f58220&gt;但因热爱，愿迎万难&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;6-正则的扩展&quot;&gt;&lt;a href=&quot;#6-正则的扩展&quot; class=&quot;headerlink&quot; title=&quot;6.正则的扩展&quot;&gt;&lt;/a&gt;6.正则的扩展&lt;/h3&gt;&lt;h4 id=&quot;6-1-RegExp-构造函数&quot;&gt;&lt;a href=&quot;#6-1-RegExp-构造函数&quot; class=&quot;headerlink&quot; title=&quot;6.1 RegExp 构造函数&quot;&gt;&lt;/a&gt;6.1 RegExp 构造函数&lt;/h4&gt;&lt;p&gt;在 ES5 中，&lt;code&gt;RegExp&lt;/code&gt;构造函数的参数有两种情况。&lt;/p&gt;
&lt;p&gt;第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;xyz&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;i&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;regexp&quot;&gt;/xyz/i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/xyz/i&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;regexp&quot;&gt;/xyz/i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/xyz/&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;i&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6 改变了这种行为。如果&lt;code&gt;RegExp&lt;/code&gt;构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/abc/ig&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;i&amp;#x27;&lt;/span&gt;).flags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;i&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，原有正则对象的修饰符是&lt;code&gt;ig&lt;/code&gt;，它会被第二个参数&lt;code&gt;i&lt;/code&gt;覆盖。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 正则的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0075</title>
    <link href="https://codermae.github.io/2021/06/18/%E6%89%93%E5%8D%A10075/"/>
    <id>https://codermae.github.io/2021/06/18/%E6%89%93%E5%8D%A10075/</id>
    <published>2021-06-18T08:06:21.000Z</published>
    <updated>2021-06-20T07:33:16.983Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ef5b9c&gt;世界上最重的木头会浮出水面吗？&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;5-字符串的新增方法&quot;&gt;&lt;a href=&quot;#5-字符串的新增方法&quot; class=&quot;headerlink&quot; title=&quot;5. 字符串的新增方法&quot;&gt;&lt;/a&gt;5. 字符串的新增方法&lt;/h3&gt;&lt;h4 id=&quot;5-1-String-fromCodePoint&quot;&gt;&lt;a href=&quot;#5-1-String-fromCodePoint&quot; class=&quot;headerlink&quot; title=&quot;5.1 String.fromCodePoint()&quot;&gt;&lt;/a&gt;5.1 String.fromCodePoint()&lt;/h4&gt;&lt;p&gt;ES5 提供&lt;code&gt;String.fromCharCode()&lt;/code&gt;方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于&lt;code&gt;0xFFFF&lt;/code&gt;的字符。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;number&quot;&gt;0x20BB7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;ஷ&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;String.fromCharCode()&lt;/code&gt;不能识别大于&lt;code&gt;0xFFFF&lt;/code&gt;的码点，所以&lt;code&gt;0x20BB7&lt;/code&gt;就发生了溢出，最高位&lt;code&gt;2&lt;/code&gt;被舍弃了，最后返回码点&lt;code&gt;U+0BB7&lt;/code&gt;对应的字符，而不是码点&lt;code&gt;U+20BB7&lt;/code&gt;对应的字符。&lt;/p&gt;
&lt;p&gt;ES6 提供了&lt;code&gt;String.fromCodePoint()&lt;/code&gt;方法，可以识别大于&lt;code&gt;0xFFFF&lt;/code&gt;的字符，弥补了&lt;code&gt;String.fromCharCode()&lt;/code&gt;方法的不足。在作用上，正好与下面的&lt;code&gt;codePointAt()&lt;/code&gt;方法相反。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCodePoint(&lt;span class=&quot;number&quot;&gt;0x20BB7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;𠮷&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCodePoint(&lt;span class=&quot;number&quot;&gt;0x78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x1f680&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x79&lt;/span&gt;) === &lt;span class=&quot;string&quot;&gt;&amp;#x27;x\uD83D\uDE80y&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，如果&lt;code&gt;String.fromCodePoint&lt;/code&gt;方法有多个参数，则它们会被合并成一个字符串返回。&lt;/p&gt;
&lt;p&gt;注意，&lt;code&gt;fromCodePoint&lt;/code&gt;方法定义在&lt;code&gt;String&lt;/code&gt;对象上，而&lt;code&gt;codePointAt&lt;/code&gt;方法定义在字符串的实例对象上。</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 字符串的新增方法" scheme="https://codermae.github.io/tags/JS-ES6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>打卡0074</title>
    <link href="https://codermae.github.io/2021/06/16/%E6%89%93%E5%8D%A10074/"/>
    <id>https://codermae.github.io/2021/06/16/%E6%89%93%E5%8D%A10074/</id>
    <published>2021-06-16T08:00:55.000Z</published>
    <updated>2021-06-18T08:05:17.002Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#ae5039&gt;所见皆为美好，所行不负年少。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;4-字符串的扩展&quot;&gt;&lt;a href=&quot;#4-字符串的扩展&quot; class=&quot;headerlink&quot; title=&quot;4. 字符串的扩展&quot;&gt;&lt;/a&gt;4. 字符串的扩展&lt;/h3&gt;&lt;p&gt;本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。&lt;/p&gt;
&lt;h4 id=&quot;4-1-字符的-Unicode-表示法&quot;&gt;&lt;a href=&quot;#4-1-字符的-Unicode-表示法&quot; class=&quot;headerlink&quot; title=&quot;4.1 字符的 Unicode 表示法&quot;&gt;&lt;/a&gt;4.1 字符的 Unicode 表示法&lt;/h4&gt;&lt;p&gt;ES6 加强了对 Unicode 的支持，允许采用&lt;code&gt;\uxxxx&lt;/code&gt;形式表示一个字符，其中&lt;code&gt;xxxx&lt;/code&gt;表示字符的 Unicode 码点。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;\u0061&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，这种表示法只限于码点在&lt;code&gt;\u0000&lt;/code&gt;~`\uFFFF`之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;\uD842\uDFB7&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot;𠮷&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;\u20BB7&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;quot; 7&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码表示，如果直接在&lt;code&gt;\u&lt;/code&gt;后面跟上超过&lt;code&gt;0xFFFF&lt;/code&gt;的数值（比如&lt;code&gt;\u20BB7&lt;/code&gt;），JavaScript 会理解成&lt;code&gt;\u20BB+7&lt;/code&gt;。由于&lt;code&gt;\u20BB&lt;/code&gt;是一个不可打印字符，所以只会显示一个空格，后面跟着一个&lt;code&gt;7&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。&lt;/p&gt;</summary>
    
    
    
    <category term="JS-ES6" scheme="https://codermae.github.io/categories/JS-ES6/"/>
    
    
    <category term="JS-ES6 字符串的扩展" scheme="https://codermae.github.io/tags/JS-ES6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
</feed>
