<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>My first blog</title>
    <url>/2021/05/01/My-first-blog/</url>
    <content><![CDATA[<h2 id="哈哈"><a href="#哈哈" class="headerlink" title="哈哈"></a>哈哈</h2><p>蛤蛤蛤蛤 终于搞定了 赶紧先来占个位 纪念一下五一还在学习的自己.</p>
<p>这是第二次搭建博客，但并不是我的第二个博客，因为第一次半途而废，因为当时感觉看的文章比较乱，<br>当然更重要的是 自 己 太 菜 ！    为了表达对参考文献作者的感激之情，就做个推广吧<a href="https://mp.weixin.qq.com/s/rIOoX2MMl0qEsJ4pnwJoqQ">原文</a>。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>个人感觉上面的文章已经写的很细了 就记录一下自己在搭建过程中遇到的两个问题吧顺便练习写博客哈哈~~~</p>
<span id="more"></span>

<h5 id="1-仓库创建"><a href="#1-仓库创建" class="headerlink" title="1.仓库创建"></a>1.仓库创建</h5><p><img src="https://i.loli.net/2021/05/01/DMTzOxP1csfaSNZ.png" alt="err"></p>
<p>Repository name: 固定格式self_uesername.github.io</p>
<p>还有就是要选Public！否则github page页面是看不见相关设置的</p>
<h5 id="2-部署网站"><a href="#2-部署网站" class="headerlink" title="2.部署网站"></a>2.部署网站</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>此时进度条已到底，激动的心，颤抖的手，直接输入地址却——</p>
<p><img src="https://i.loli.net/2021/05/01/Dnv9RmXGHjxpzqh.png" alt="err"></p>
<p>啪！快乐没了（表情包请自行脑补）</p>
<p>二话不说直接百度，有人说在电脑上不可以在手机上却可以，于是我也try了一下</p>
<p>果然可以进！！！但是与我想象的好像不大一样，网站内容仅显示了两行文本，</p>
<p>看了一眼应该是main里READEME.md的内容</p>
<p>思考(发呆)一会儿之后…找到了GitHub Pages设置发现</p>
<p><img src="https://i.loli.net/2021/05/01/MGwgK5XRPYC4foL.png" alt="err"></p>
<p><code>Your GitHub Pages site is currently being built from the 【main】 branch</code></p>
<p>于是将Branch改为master 刷新手机页面，啪！快乐回来了</p>
<p>但是电脑还是不能访问，可能是要修改host，一会儿继续改..</p>
<p>已经搞定，首先查询网站的ip地址可以在<a href="https://www.ipip.net/">这里查询</a> ，</p>
<p>然后在C:\Windows\System32\drivers\etc下找到并修改hosts，写入以下内容</p>
<p><code>ip self_username.github.io</code></p>
<p>再打开powershell 输入以下内容清理DNS缓存，网站应该就可以正常访问啦。</p>
<p><code>clear -dnsclientcache</code></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Githubpage+hexo博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>First Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>打卡0001</title>
    <url>/2021/05/04/HTML/</url>
    <content><![CDATA[<p>青春不息，奋斗不止</p>
<h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><h3 id="1-null-amp-amp-undefined-amp-amp-boolean"><a href="#1-null-amp-amp-undefined-amp-amp-boolean" class="headerlink" title="1.null &amp;&amp; undefined &amp;&amp; boolean"></a>1.null &amp;&amp; undefined &amp;&amp; boolean</h3><p><code>null</code>与<code>undefined</code>都可以表示“没有”，在if语句中都会自动转为<code>false</code><br>区别是<code>null</code>表示一个“空”的对象，转为数值是为<code>0</code><br>      <code>undefined</code>表示“此处无定义”的原始值，转为数值时为<code>NaN</code><br>      <span id="more"></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!undefined) &#123;</span><br><span class="line">  console.log(&#39;undefined is false&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; undefined is false</span><br><span class="line"></span><br><span class="line">if (!null) &#123;</span><br><span class="line">  console.log(&#39;null is false&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; null is false</span><br><span class="line"></span><br><span class="line">undefined &#x3D;&#x3D; null</span><br><span class="line">&#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">Number(null) &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">Number(undefined) &#x2F;&#x2F; NaN</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>undefined</code>表示“未定义”，以下场景都会返回<code>undefined</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; 变量声明了，但没有赋值</span><br><span class="line">var i;</span><br><span class="line">i &#x2F;&#x2F; undefined</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span><br><span class="line">function f(x) &#123;</span><br><span class="line">  return x;</span><br><span class="line">&#125;</span><br><span class="line">f() &#x2F;&#x2F; undefined</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对象没有赋值的属性</span><br><span class="line">var  o &#x3D; new Object();</span><br><span class="line">o.p &#x2F;&#x2F; undefined</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数没有返回值时，默认返回 undefined</span><br><span class="line">function f() &#123;&#125;</span><br><span class="line">f() &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<p>布尔值代表<code>true</code>和<code>false</code>两个状态，下列运算符都会返回布尔值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前置逻辑运算符： ! (Not)</span><br><span class="line">相等运算符：&#x3D;&#x3D;&#x3D;，!&#x3D;&#x3D;，&#x3D;&#x3D;，!&#x3D;</span><br><span class="line">比较运算符：&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;</span><br></pre></td></tr></table></figure>
<p>如果JS预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值，只有以下六个<br>值被转为<code>false</code>，其它都被转为<code>true</code>，空数组和空对象对应的布尔值也为<code>true</code></p>
<p><code>undefined</code> <code>null</code> <code>false</code> <code>0</code> <code>NaN</code> <code>&quot;&quot;或&#39;&#39;(空字符串)</code></p>
<h3 id="2-数值"><a href="#2-数值" class="headerlink" title="2.数值"></a>2.数值</h3><h4 id="2-1整数和浮点数"><a href="#2-1整数和浮点数" class="headerlink" title="2.1整数和浮点数"></a>2.1整数和浮点数</h4><p>JS内部，所有数字都是以64位浮点数形式储存，所以1与1.0是相同的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &#x3D;&#x3D;&#x3D; 1.0  &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>也就是说JS的底层根本没有证书，所有数字都是小数（64位浮点数），但是某些运算只有整数才能完成，<br>此时JS会把64位浮点数转成32位整数，然后在进行运算<br>由于浮点数是不确定的值，所以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3</span><br><span class="line">&#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">0.3 &#x2F; 0.1</span><br><span class="line">&#x2F;&#x2F; 2.9999999999999996</span><br><span class="line"></span><br><span class="line">(0.3 - 0.2) &#x3D;&#x3D;&#x3D; (0.2 - 0.1)</span><br><span class="line">&#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<h4 id="2-2数值精度"><a href="#2-2数值精度" class="headerlink" title="2.2数值精度"></a>2.2数值精度</h4><p>JS浮点数的64个二进制位，从最左边开始是这样构成的：<br><code>第1位：符号位，0表示正数，1表示负数，决定数的正负</code><br><code>第2-12位：指数部分，决定数值大小</code><br><code>第13-64位：小数部分，即有效数字，决定数值精度</code></p>
<p>精度最多只能到53个二进制位，这意味着，绝对值小于2的53次方的整数，即-2的53次方到2的53次方，都可以精确表示超出之后运算结果会出现错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.pow(2, 53)</span><br><span class="line">&#x2F;&#x2F; 9007199254740992</span><br><span class="line"></span><br><span class="line">Math.pow(2, 53) + 1</span><br><span class="line">&#x2F;&#x2F; 9007199254740992</span><br><span class="line"></span><br><span class="line">Math.pow(2, 53) + 2</span><br><span class="line">&#x2F;&#x2F; 9007199254740994</span><br></pre></td></tr></table></figure>

<h4 id="2-3数值范围"><a href="#2-3数值范围" class="headerlink" title="2.3数值范围"></a>2.3数值范围</h4><p>指数部分的长度是11个二进制位，所以指数部分最大值是2047（2的11次方-1），分出一半表示负数，则JS能够表示的数值范围位<code>2的1024次方</code>到<code>2的负1023次方（开区间）</code>，超出这个范围的数则无法表示<br>如果一个数大于<code>2的1024次方</code>则会发生‘正向溢出’返回<code>Infinity</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.pow(2, 1024) &#x2F;&#x2F; Infinity</span><br></pre></td></tr></table></figure>
<p>如果一个数小于<code>2的负1075次方（-1023再加上小数部分的52位）</code>，则会发生‘负向溢出’返回0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.pow(2, -1075) &#x2F;&#x2F; 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JavaScript 提供Number对象的<code>MAX_VALUE</code>和<code>MIN_VALUE</code>属性，返回可以表示的具体的最大值和最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number.MAX_VALUE &#x2F;&#x2F; 1.7976931348623157e+308</span><br><span class="line">Number.MIN_VALUE &#x2F;&#x2F; 5e-324</span><br></pre></td></tr></table></figure>

<h3 id="3-数值的表示法"><a href="#3-数值的表示法" class="headerlink" title="3.数值的表示法"></a>3.数值的表示法</h3><p>JS的数值有多种表示方法，可以用字面形式直接表示，比如<code>35</code>（十进制）和<code>0xFF</code>（十六进制）<br>数值也可以采用科学计数法表示,例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123e3 &#x2F;&#x2F; 123000</span><br><span class="line">123e-3 &#x2F;&#x2F; 0.123</span><br><span class="line">-3.1E+12 &#x2F;&#x2F; -3100000000000</span><br><span class="line">.1e-23 &#x2F;&#x2F; 1e-24</span><br></pre></td></tr></table></figure>
<p>若数值’小数点前的数字多于21位‘或‘小数点后的零多于5个’JavaScript 会自动将数值转为科学计数法表示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567890123456789012</span><br><span class="line">&#x2F;&#x2F; 1.2345678901234568e+21</span><br><span class="line"></span><br><span class="line">123456789012345678901</span><br><span class="line">&#x2F;&#x2F; 123456789012345680000</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 小数点后紧跟5个以上的零，</span><br><span class="line">&#x2F;&#x2F; 就自动转为科学计数法</span><br><span class="line">0.0000003 &#x2F;&#x2F; 3e-7</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 否则，就保持原来的字面形式</span><br><span class="line">0.000003 &#x2F;&#x2F; 0.000003</span><br></pre></td></tr></table></figure>

<h3 id="4-数值的进制"><a href="#4-数值的进制" class="headerlink" title="4.数值的进制"></a>4.数值的进制</h3><p>使用字面量（literal）直接表示一个数值时，JS对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制<br>默认情况下，JS内部会自动将八进制、十六进制、二进制转为十进制</p>
<h3 id="5-特殊数值"><a href="#5-特殊数值" class="headerlink" title="5.特殊数值"></a>5.特殊数值</h3><h4 id="5-1正零和负零"><a href="#5-1正零和负零" class="headerlink" title="5.1正零和负零"></a>5.1正零和负零</h4><p>第一个二进制位是符号位，这意味着所有数字都有负值，包括0<br>几乎所有场合，正零和负零都被当做为<code>0</code>，唯一有区别的场合是0作为分母时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-0 &#x3D;&#x3D;&#x3D; +0 &#x2F;&#x2F; true</span><br><span class="line">0 &#x3D;&#x3D;&#x3D; -0 &#x2F;&#x2F; true</span><br><span class="line">0 &#x3D;&#x3D;&#x3D; +0 &#x2F;&#x2F; true</span><br><span class="line">+0 &#x2F;&#x2F; 0</span><br><span class="line">-0 &#x2F;&#x2F; 0</span><br><span class="line">(-0).toString() &#x2F;&#x2F; &#39;0&#39;</span><br><span class="line">(+0).toString() &#x2F;&#x2F; &#39;0&#39;</span><br><span class="line">  --------------------</span><br><span class="line">  --------------------</span><br><span class="line">(1 &#x2F; +0) &#x3D;&#x3D;&#x3D; (1 &#x2F; -0) &#x2F;&#x2F; false</span><br><span class="line"> &#x2F;&#x2F; 除以正零得到+Infinity，除以负零得到-Infinity</span><br></pre></td></tr></table></figure>

<h4 id="5-2-NaN"><a href="#5-2-NaN" class="headerlink" title="5.2 NaN"></a>5.2 NaN</h4><p><code>NaN</code>是一个特殊数值，属于<code>number</code>类型，表示“非数字”（not a number），主要出现在字符串解<br>析成数字出错的场合，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof NaN &#x2F;&#x2F; &#39;number&#39;</span><br><span class="line">5 - &#39;x&#39; &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure>
<p>另外，一些数学函数的运算结果也会出现<code>NaN</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.acos(2) &#x2F;&#x2F; NaN</span><br><span class="line">Math.log(-1) &#x2F;&#x2F; NaN</span><br><span class="line">Math.sqrt(-1) &#x2F;&#x2F; NaN</span><br><span class="line">0除以0也会得到NaN</span><br><span class="line">0 &#x2F; 0   &#x2F;&#x2F; NaN </span><br></pre></td></tr></table></figure>
<p>运算规则：<br>NaN不等于任何值，包括本身,并且与任何数（包括它自己）的运算，得到的都是NaN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NaN &#x3D;&#x3D;&#x3D; NaN  &#x2F;&#x2F; false   </span><br><span class="line">NaN + 32 &#x2F;&#x2F; NaN</span><br><span class="line">NaN - 32 &#x2F;&#x2F; NaN</span><br><span class="line">NaN * 32 &#x2F;&#x2F; NaN</span><br><span class="line">NaN &#x2F; 32 &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure>
<p>数组的<code>indexOf</code>方法内部使用的是严格相等运算符，所以该方法对NaN不成立</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[NaN].indexOf(NaN) &#x2F;&#x2F; -1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>NaN在布尔运算时被当作false。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Boolean(NaN) &#x2F;&#x2F; false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-3-Infinity"><a href="#5-3-Infinity" class="headerlink" title="5.3 Infinity"></a>5.3 Infinity</h4><p><code>infinity</code> 表示”无穷“，有正负之分，出现在无穷和非0除以0的场景中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nfinity &#x3D;&#x3D;&#x3D; -Infinity &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">Math.pow(2, 1024)   &#x2F;&#x2F; Infinity</span><br><span class="line">0 &#x2F; 0   &#x2F;&#x2F; NaN</span><br><span class="line">1 &#x2F; 0   &#x2F;&#x2F; Infinity</span><br><span class="line">1 &#x2F; -0 &#x2F;&#x2F; -Infinity</span><br><span class="line">-1 &#x2F; -0 &#x2F;&#x2F; Infinity</span><br></pre></td></tr></table></figure>
<p><code>infinity</code>大于一切数值，<code>-infinity</code>小于一切数值，但与<code>NaN</code>比较会返回<code>false</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Infinity &gt; 1000 &#x2F;&#x2F; true</span><br><span class="line">-Infinity &lt; -1000 &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">Infinity &gt; NaN &#x2F;&#x2F; false</span><br><span class="line">-Infinity &gt; NaN &#x2F;&#x2F; false</span><br><span class="line">Infinity &lt; NaN &#x2F;&#x2F; false</span><br><span class="line">-Infinity &lt; NaN &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>
<p>运算规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 * Infinity &#x2F;&#x2F; Infinity</span><br><span class="line">5 - Infinity &#x2F;&#x2F; -Infinity</span><br><span class="line">Infinity &#x2F; 5 &#x2F;&#x2F; Infinity</span><br><span class="line">5 &#x2F; Infinity &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">0 * Infinity &#x2F;&#x2F; NaN</span><br><span class="line">0 &#x2F; Infinity &#x2F;&#x2F; 0</span><br><span class="line">Infinity &#x2F; 0 &#x2F;&#x2F; Infinity</span><br><span class="line"></span><br><span class="line">Infinity + Infinity &#x2F;&#x2F; Infinity</span><br><span class="line">Infinity * Infinity &#x2F;&#x2F; Infinity</span><br><span class="line"></span><br><span class="line">Infinity - Infinity &#x2F;&#x2F; NaN</span><br><span class="line">Infinity &#x2F; Infinity &#x2F;&#x2F; NaN</span><br><span class="line"></span><br><span class="line">null * Infinity &#x2F;&#x2F; NaN</span><br><span class="line">null &#x2F; Infinity &#x2F;&#x2F; 0</span><br><span class="line">Infinity &#x2F; null &#x2F;&#x2F; Infinity</span><br><span class="line"></span><br><span class="line">undefined + Infinity &#x2F;&#x2F; NaN</span><br><span class="line">undefined - Infinity &#x2F;&#x2F; NaN</span><br><span class="line">undefined * Infinity &#x2F;&#x2F; NaN</span><br><span class="line">undefined &#x2F; Infinity &#x2F;&#x2F; NaN</span><br><span class="line">Infinity &#x2F; undefined &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure>

<h3 id="6-与数值有关的全局方法"><a href="#6-与数值有关的全局方法" class="headerlink" title="6.与数值有关的全局方法"></a>6.与数值有关的全局方法</h3><h4 id="6-1-parseInt"><a href="#6-1-parseInt" class="headerlink" title="6.1 parseInt()"></a>6.1 parseInt()</h4><p><code>parseInt()</code>用于将字符串转为整数,若参数不是字符串，则先转换为字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(&#39;123&#39;) &#x2F;&#x2F; 123</span><br><span class="line">parseInt(&#39;   81&#39;) &#x2F;&#x2F; 81</span><br><span class="line">parseInt(1.23) &#x2F;&#x2F; 1</span><br><span class="line">parseInt(&#39;1.23&#39;) &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>
<p>字符串转换的时候是一个个字符依次转换，如果遇到不能转为数字的字符就停止并返回已经转好的部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(&#39;8a&#39;) &#x2F;&#x2F; 8</span><br><span class="line">parseInt(&#39;12**&#39;) &#x2F;&#x2F; 12</span><br><span class="line">parseInt(&#39;12.34&#39;) &#x2F;&#x2F; 12</span><br><span class="line">parseInt(&#39;15e2&#39;) &#x2F;&#x2F; 15</span><br><span class="line">parseInt(&#39;15px&#39;) &#x2F;&#x2F; 15</span><br><span class="line">parseInt(&#39;abc&#39;) &#x2F;&#x2F; NaN</span><br><span class="line">parseInt(&#39;.3&#39;) &#x2F;&#x2F; NaN</span><br><span class="line">parseInt(&#39;&#39;) &#x2F;&#x2F; NaN</span><br><span class="line">parseInt(&#39;+&#39;) &#x2F;&#x2F; NaN</span><br><span class="line">parseInt(&#39;+1&#39;) &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>
<p>所以parseint的返回值只有两个，要么是一个十进制数，要么是NaN<br>如果字符串以0或0x（X）开头，会按照10进制和16进制进行解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(&#39;011&#39;) &#x2F;&#x2F; 11</span><br><span class="line">parseInt(&#39;0x10&#39;) &#x2F;&#x2F; 16</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>若存在自动转为科学计数法的数字，则视为科学计数法表示的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(1000000000000000000000.5) &#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(&#39;1e+21&#39;) &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">parseInt(0.0000008) &#x2F;&#x2F; 8</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(&#39;8e-7&#39;) &#x2F;&#x2F; 8</span><br></pre></td></tr></table></figure>
<h5 id="6-1-2进制转换"><a href="#6-1-2进制转换" class="headerlink" title="6.1.2进制转换"></a>6.1.2进制转换</h5><p>parseInt()还支持第二个参数（2-36），表示被解析的进制，默认为10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(&#39;1000&#39;) &#x2F;&#x2F; 1000</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(&#39;1000&#39;, 10) &#x2F;&#x2F; 1000</span><br><span class="line">--------------</span><br><span class="line">--------------</span><br><span class="line">parseInt(&#39;1000&#39;, 2) &#x2F;&#x2F; 8</span><br><span class="line">parseInt(&#39;1000&#39;, 6) &#x2F;&#x2F; 216</span><br><span class="line">parseInt(&#39;1000&#39;, 8) &#x2F;&#x2F; 512</span><br></pre></td></tr></table></figure>
<p>若第二个参数不属于2-36则返回<code>NaN</code>,若是0、NaN、undefined则忽略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(&#39;10&#39;, 1) &#x2F;&#x2F; NaN</span><br><span class="line">parseInt(&#39;10&#39;, 0) &#x2F;&#x2F; 10</span><br><span class="line">parseInt(&#39;10&#39;, null) &#x2F;&#x2F; 10</span><br><span class="line">parseInt(&#39;10&#39;, undefined) &#x2F;&#x2F; 10</span><br></pre></td></tr></table></figure>
<p>若字符串包含对于制定进制无意义的字符，则从最高位开始，只返回可以转换的值，如果最高位无法转换则返回<code>NaN</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(&#39;1546&#39;, 2) &#x2F;&#x2F; 1</span><br><span class="line">parseInt(&#39;546&#39;, 2) &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure>
<p>当第一个参数不是字符串时,下面代码中，十六进制的0x11会被先转为十进制的17，再转为字符串。然后，再用36进制<br>或二进制解读字符串17，最后返回结果43和1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(0x11, 36) &#x2F;&#x2F; 43</span><br><span class="line">parseInt(0x11, 2) &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(String(0x11), 36)</span><br><span class="line">parseInt(String(0x11), 2)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(&#39;17&#39;, 36)</span><br><span class="line">parseInt(&#39;17&#39;, 2)</span><br></pre></td></tr></table></figure>
<p>当第一个参数是八进制0开头的非字符串时，下面代码中，第一行的011会被先转为字符串9，因为9不是二进制的有效字符，<br>所以返回NaN。如果直接计算parseInt(‘011’, 2)，011则是会被当作二进制处理，返回3。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(011, 2) &#x2F;&#x2F; NaN</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(String(011), 2)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(String(9), 2)</span><br></pre></td></tr></table></figure>


<h4 id="6-2-parseFloat"><a href="#6-2-parseFloat" class="headerlink" title="6.2 parseFloat()"></a>6.2 parseFloat()</h4><p>parseFloat()用于将字符串转为浮点数，如果字符串符合科学计数法，则会进行相应的转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat(&#39;3.14&#39;) &#x2F;&#x2F; 3.14</span><br><span class="line">parseFloat(&#39;314e-2&#39;) &#x2F;&#x2F; 3.14</span><br><span class="line">parseFloat(&#39;0.0314E+2&#39;) &#x2F;&#x2F; 3.14</span><br></pre></td></tr></table></figure>

<p>会自动过滤字符串前导的空格,如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat(&#39;\t\v\r12.34\n &#39;) &#x2F;&#x2F; 12.34</span><br><span class="line">parseFloat(&#39;3.14aaaaaa&#39;) &#x2F;&#x2F; 3.14</span><br></pre></td></tr></table></figure>
<p>如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回<code>NaN</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat([]) &#x2F;&#x2F; NaN</span><br><span class="line">parseFloat(&#39;FF2&#39;) &#x2F;&#x2F; NaN</span><br><span class="line">parseFloat(&#39;&#39;) &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure>

<p>parseFloat()与number()的区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat(true)  &#x2F;&#x2F; NaN</span><br><span class="line">Number(true) &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">parseFloat(null) &#x2F;&#x2F; NaN</span><br><span class="line">Number(null) &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">parseFloat(&#39;&#39;) &#x2F;&#x2F; NaN</span><br><span class="line">Number(&#39;&#39;) &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">parseFloat(&#39;123.45#&#39;) &#x2F;&#x2F; 123.45</span><br><span class="line">Number(&#39;123.45#&#39;) &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure>

<h4 id="6-3-isNaN"><a href="#6-3-isNaN" class="headerlink" title="6.3 isNaN()"></a>6.3 isNaN()</h4><p><code>isNaN</code>用来判断一个值是否为NaN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isNaN(NaN) &#x2F;&#x2F; true</span><br><span class="line">isNaN(123) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>
<p>若果传入非数值，会被先转为数值，比如传入字符串的时候，字符串会被先转成<code>NaN</code>，所以最后返回true，<br>所以<code>isNaN</code>为<code>true</code>的值不一定是<code>NaN</code>还可能是一个字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isNaN(&#39;Hello&#39;) &#x2F;&#x2F; true</span><br><span class="line">&#x2F;&#x2F; 相当于</span><br><span class="line">isNaN(Number(&#39;Hello&#39;)) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>
<p>对于对象和数组<code>isNaN</code>也返回<code>true</code>，但是对于空数组和只有一个数值成员的数组<code>isNaN</code>返回<code>false</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isNaN(&#123;&#125;) &#x2F;&#x2F; true</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">isNaN(Number(&#123;&#125;)) &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">isNaN([&#39;xzy&#39;]) &#x2F;&#x2F; true</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">isNaN(Number([&#39;xzy&#39;])) &#x2F;&#x2F; true</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">isNaN([]) &#x2F;&#x2F; false</span><br><span class="line">isNaN([123]) &#x2F;&#x2F; false</span><br><span class="line">isNaN([&#39;123&#39;]) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>
<p>上面代码之所以返回<code>false</code>，原因是这些数组能被<code>Number</code>函数转成数值,<br>因此，使用<code>isNaN</code>之前，最好判断一下数据类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myIsNaN(value) &#123;</span><br><span class="line">  return typeof value &#x3D;&#x3D;&#x3D; &#39;number&#39; &amp;&amp; isNaN(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断<code>NaN</code>更可靠的方法是，利用<code>NaN</code>为唯一不等于自身的值的这个特点，进行判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myIsNaN(value) &#123;</span><br><span class="line">  return value !&#x3D;&#x3D; value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-4-isFinite"><a href="#6-4-isFinite" class="headerlink" title="6.4 isFinite()"></a>6.4 isFinite()</h4><p><code>isFinite</code>方法返回一个布尔值，表示某个值是否为正常的数值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isFinite(Infinity) &#x2F;&#x2F; false</span><br><span class="line">isFinite(-Infinity) &#x2F;&#x2F; false</span><br><span class="line">isFinite(NaN) &#x2F;&#x2F; false</span><br><span class="line">isFinite(undefined) &#x2F;&#x2F; false</span><br><span class="line">isFinite(null) &#x2F;&#x2F; true</span><br><span class="line">isFinite(-1) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>
<p>除了<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code>和<code>undefined</code>这几个值会返回<code>false</code>，<code>isFinite</code>对于其他的数值都会返回<code>true</code></p>
<p><code>well,that&#39;s all for today.</code></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS数据类型</tag>
      </tags>
  </entry>
</search>
